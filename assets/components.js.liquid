'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*============================================================================
  Ajax the add to cart experience by revealing it in a side drawer
  Plugin Documentation - http://shopify.github.io/Timber/#ajax-cart
  (c) Copyright 2015 Shopify Inc. Author: Carson Shold (@cshold). All Rights Reserved.

  This file includes:
    - Basic Shopify Ajax API calls
    - Ajax cart plugin

  This requires:
    - jQuery 1.8+
    - handlebars.min.js (for cart template)
    - modernizr.min.js
    - snippet/ajax-cart-template.liquid

  Customized version of Shopify's jQuery API
  (c) Copyright 2009-2015 Shopify Inc. Author: Caroline Schnapp. All Rights Reserved.
==============================================================================*/
(function () {
    if (typeof ShopifyAPI === 'undefined') {
        window.ShopifyAPI = {};
    }

    /*============================================================================
      Upscribe Functions
    ==============================================================================*/

    window.currencySymbolMap = {
          AUD: '$',
          CAD: '$',
          DKK: 'kr',
          EUR: '€',
          HKD: '$',
          JPY: '¥',
          NZD: '$',
          GBP: '£',
          SGD: '$',
          USD: '$',
        }

    function formatPriceWithCurrency(value) {
      var activeCurrencyString = window.Shopify.currency.active
      return window.currencySymbolMap[activeCurrencyString] + value + ' ' 
    }


    function upscribeBuildCheckout() {
        $.ajax('/cart.json')
        .done(function(cart) {
            console.log('get cart done res', cart)

            var cartToken = cart.token

            cart.url = window.Shopify.shop
            cart.analytics = window.ShopifyAnalytics
            $.ajax({
                url: "https://endpoint.upscribe.io/cart",
                type: "POST",
                data: JSON.stringify(cart)
            })
            .done(function(res) {
                console.log('post done: ', res)
            })
            .fail(function(e) {
                console.log('post error: ', e)
                return e
            })
        })
        .fail(function(e) {
            console.log('get cart error', e);
            return e
        })
    }


    function upscribeGetCookie(name) {
        return (document.cookie.match('(^|; )' + name + '=([^;]*)')||0)[2];
    }

    function upscribeBuildCheckoutURL() {

        var myshopify_domain = 'vimergy.myshopify.com';
        var token = upscribeGetCookie('cart');
        
        try {
            // Cross-domain tracking with Google Analytics
            var ga_linker = ga.getAll()[0].get('linkerParam');
        } catch (e) {
            // 'ga' is not available
            var ga_linker = '';
        }

        var checkout_url = 'https://checkout.vimergy.com/checkout?store=' + myshopify_domain + '&token=' + token + '&is_first_load=true'

        var rfsnAidParam = localStorage.getItem('rfsn_aid')
        var rfsnCiParam = localStorage.getItem('rfsn_ci')
        var rfsnCsparam = localStorage.getItem('rfsn_cs')
        var rfsnCurrentCart = localStorage.getItem('current_rfsn_cart')

        if (rfsnAidParam) checkout_url += '&rfsn_aid=' + rfsnAidParam
        if (rfsnCiParam) checkout_url += '&rfsn_ci=' + rfsnCiParam
        if (rfsnCsparam) checkout_url += '&rfsn_cs=' + rfsnCsparam
        if (rfsnCurrentCart) checkout_url += '&current_rfsn_cart=' + rfsnCurrentCart

        upscribeBuildCheckout();


        $('.js-cart-checkout-btn').hide();
        $('.js-cart-checkout-recharge-btn').css('display' , 'inline-block');
        $('.js-cart-checkout-recharge-btn').attr('href' , checkout_url);
    }


    function UpdateTotalPrice(){

        if ($('.js-subscription-price').length){
            console.log('sub product')

            var discountAmount = $('.js-subscription-price').attr('data-subscription-amount')
            var discountAmountBreak = discountAmount.replace('$', '');
            var discountAmountFinal = discountAmountBreak.replace('.', '');

            var originalPrice = $('.c-cart__product').attr('data-original-price')
            var sum = 0

            $( ".c-cart__product" ).each(function() {
                if ($(this).hasClass("js-subscription-price")) {
                    var subAmountPercentage = $(this).attr('data-discount-percentage')
                    var subAmountFinalPercentage = subAmountPercentage.replace('%', '');
                    var subAmount = $(this).attr('data-subscription-amount')
                    var subAmountBreak = subAmount.replace('$', '');
                    var subAmountFinal = subAmountBreak.replace('.', '');
                    var subOriginalAmount = $(this).attr('data-originalsub-price')
                    var subQty = $(this).attr('data-cart-sub-quantity')
                    var originalPrice = $(this).attr('data-product-price') 
                    var subAmountDiscount = originalPrice - subAmountFinal
                    var subAmountTotalDiscount = subAmountDiscount * subQty
                    var subDiscount = subOriginalAmount * subAmountFinalPercentage
                    var subDiscountDivide = (subDiscount / 100)
                    var subDiscountFinal = subOriginalAmount - subDiscountDivide 
                    var divideSubDiscount = (subDiscountFinal / 100).toFixed(2)
                    var subDiscountPrice = formatPriceWithCurrency(divideSubDiscount)
                    $(this).find('.c-cart__itemPriceDiscount').text(subDiscountPrice)
                }

                var totalRawValue =$(this).find('[data-line-final-price]').text()
                var totalBreakValue = totalRawValue.replace('$', '');
                var totalBreakValueFinal = totalBreakValue.replace('.', '');
                sum += parseInt(totalBreakValueFinal);

            });

            var divideProductPrice = (sum / 100).toFixed(2)
            var productTotalPrice = formatPriceWithCurrency(divideProductPrice)
            $('#cart-subtotal').text(productTotalPrice);
            $('.c-drawer__subscribeProduct').removeClass('is-active');
            $('.c-drawer__subscribeProduct').hide();
            $('.c-cart__additionalButtons').hide();
            $('.js-cart-checkout-btn').hide();
            $('.js-cart-checkout-recharge-btn').show();
            
            upscribeBuildCheckoutURL();
            

        } else if ($('.js-onetime-price').length){
            console.log('One Time product')
            $('.c-drawer__subscribeProduct').addClass('is-active');
            $('.c-drawer__subscribeProduct').show();
            $('.c-cart__additionalButtons').show();
            $('.js-cart-checkout-btn').show();
            $('.js-cart-checkout-recharge-btn').hide();
        }
    }


    /*============================================================================
      API Helper Functions
    ==============================================================================*/
    function attributeToString(attribute) {
        if (typeof attribute !== 'string') {
            attribute += '';
            if (attribute === 'undefined') {
                attribute = '';
            }
        }
        return jQuery.trim(attribute);
    };

    /*============================================================================
      API Functions
    ==============================================================================*/
    ShopifyAPI.onCartUpdate = function (cart) {
        // alert('There are now ' + cart.item_count + ' items in the cart.');
    };

    ShopifyAPI.updateCartNote = function (note, callback) {
        var $body = $(document.body),
            params = {
            type: 'POST',
            url: '/cart/update.js',
            data: 'note=' + attributeToString(note),
            dataType: 'json',
            beforeSend: function beforeSend() {
                $body.trigger('beforeUpdateCartNote.ajaxCart', note);
            },
            success: function success(cart) {
                if (typeof callback === 'function') {
                    callback(cart);
                } else {
                    ShopifyAPI.onCartUpdate(cart);
                }
                $body.trigger('afterUpdateCartNote.ajaxCart', [note, cart]);
            },
            error: function error(XMLHttpRequest, textStatus) {
                $body.trigger('errorUpdateCartNote.ajaxCart', [XMLHttpRequest, textStatus]);
                ShopifyAPI.onError(XMLHttpRequest, textStatus);
            },
            complete: function complete(jqxhr, text) {
                $body.trigger('completeUpdateCartNote.ajaxCart', [this, jqxhr, text]);
            }
        };
        jQuery.ajax(params);
    };

    ShopifyAPI.onError = function (XMLHttpRequest, textStatus) {
        var data = eval('(' + XMLHttpRequest.responseText + ')');
        if (!!data.message) {
            alert(data.message + '(' + data.status + '): ' + data.description);
        }
    };

    /*============================================================================
      POST to cart/add.js returns the JSON of the cart
        - Allow use of form element instead of just id
        - Allow custom error callback
    ==============================================================================*/
    ShopifyAPI.addItemFromForm = function (form, callback, errorCallback) {
        var $body = $(document.body),
            params = {
            type: 'POST',
            url: '/cart/add.js',
            data: jQuery(form).serialize(),
            dataType: 'json',
            beforeSend: function beforeSend(jqxhr, settings) {
                $body.trigger('beforeAddItem.ajaxCart', form);
            },
            success: function success(line_item) {
                if (typeof callback === 'function') {
                    callback(line_item, form);
                } else {
                    ShopifyAPI.onItemAdded(line_item, form);
                }
                $body.trigger('afterAddItem.ajaxCart', [line_item, form]);
            },
            error: function error(XMLHttpRequest, textStatus) {
                if (typeof errorCallback === 'function') {
                    errorCallback(XMLHttpRequest, textStatus);
                } else {
                    ShopifyAPI.onError(XMLHttpRequest, textStatus);
                }
                $body.trigger('errorAddItem.ajaxCart', [XMLHttpRequest, textStatus]);
            },
            complete: function complete(jqxhr, text) {
                $body.trigger('completeAddItem.ajaxCart', [this, jqxhr, text]);
            }
        };
        jQuery.ajax(params);
    };

    // Get from cart.js returns the cart in JSON
    ShopifyAPI.getCart = function (callback) {
        $(document.body).trigger('beforeGetCart.ajaxCart');
        jQuery.getJSON('/cart.js', function (cart, textStatus) {
            if (typeof callback === 'function') {
                callback(cart);
            } else {
                ShopifyAPI.onCartUpdate(cart);
            }
            $(document.body).trigger('afterGetCart.ajaxCart', cart);
        });
    };

    // POST to cart/change.js returns the cart in JSON
    ShopifyAPI.changeItem = function (line, quantity, callback) {
        var $body = $(document.body),
            params = {
            type: 'POST',
            url: '/cart/change.js',
            data: 'quantity=' + quantity + '&line=' + line,
            dataType: 'json',
            beforeSend: function beforeSend() {
                $body.trigger('beforeChangeItem.ajaxCart', [line, quantity]);
            },
            success: function success(cart) {
                if (typeof callback === 'function') {
                    callback(cart);
                } else {
                    ShopifyAPI.onCartUpdate(cart);
                }
                $body.trigger('afterChangeItem.ajaxCart', [line, quantity, cart]);
            },
            error: function error(XMLHttpRequest, textStatus) {
                $body.trigger('errorChangeItem.ajaxCart', [XMLHttpRequest, textStatus]);
                ShopifyAPI.onError(XMLHttpRequest, textStatus);
            },
            complete: function complete(jqxhr, text) {
                $body.trigger('completeChangeItem.ajaxCart', [this, jqxhr, text]);
            }
        };
        jQuery.ajax(params);
    };

    /*============================================================================
      Ajax Shopify Add To Cart
    ==============================================================================*/
    var ajaxCart = function (module, $) {

        'use strict';

        // Public functions

        var init, loadCart;

        // Private general variables
        var settings, isUpdating, $body;

        // Private plugin variables
        var $formContainer, $addToCart, $cartCountSelector, $cartCostSelector, $cartContainer, $drawerContainer;

        // Private functions
        var updateCountPrice, formOverride, itemAddedCallback, itemErrorCallback, cartUpdateCallback, buildCart, cartCallback, adjustCart, adjustCartCallback, createQtySelectors, qtySelectors, validateQty;

        /*============================================================================
          Initialise the plugin and define global options
        ==============================================================================*/
        init = function init(options) {

            // Default settings
            settings = {
                formSelector: 'form[action^="/cart/add"]',
                cartContainer: '#CartContainer',
                addToCartSelector: 'input[type="submit"]',
                cartCountSelector: null,
                cartCostSelector: null,
                moneyFormat: '$',
                disableAjaxCart: false,
                enableQtySelectors: true
            };

            // Override defaults with arguments
            $.extend(settings, options);

            // Select DOM elements
            $formContainer = $(settings.formSelector);
            $cartContainer = $(settings.cartContainer);
            $addToCart = $formContainer.find(settings.addToCartSelector);
            $cartCountSelector = $(settings.cartCountSelector);
            $cartCostSelector = $(settings.cartCostSelector);

            // General Selectors
            $body = $(document.body);

            // Track cart activity status
            isUpdating = false;

            // Setup ajax quantity selectors on the any template if enableQtySelectors is true
            if (settings.enableQtySelectors) {
                qtySelectors();
            }

            // Take over the add to cart form submit action if ajax enabled
            if (!settings.disableAjaxCart && $addToCart.length) {
                formOverride();
            }

            // Run this function in case we're using the quantity selector outside of the cart
            adjustCart();
        };

        loadCart = function loadCart() {
            $('body').addClass('drawer--is-loading');
            ShopifyAPI.getCart(cartUpdateCallback);
        };

        updateCountPrice = function updateCountPrice(cart) {
            if ($cartCountSelector) {
                $cartCountSelector.html(cart.item_count).removeClass('hidden-count');

                if (cart.item_count === 0) {
                    $cartCountSelector.addClass('hidden-count');
                }
            }
            if ($cartCostSelector) {
                $cartCostSelector.html(Shopify.formatMoney(cart.total_price, settings.moneyFormat));
            }
        };

        formOverride = function formOverride() {
            $formContainer.on('submit', function (evt) {
                evt.preventDefault();

                // Add class to be styled if desired
                $addToCart.removeClass('is-added').addClass('is-adding');

                // Remove any previous quantity errors
                $('.qty-error').remove();

                ShopifyAPI.addItemFromForm(evt.target, itemAddedCallback, itemErrorCallback);
            });
        };

        itemAddedCallback = function itemAddedCallback(product) {
            $addToCart.removeClass('is-adding').addClass('is-added');

            ShopifyAPI.getCart(cartUpdateCallback);
        };

        itemErrorCallback = function itemErrorCallback(XMLHttpRequest, textStatus) {
            var data = eval('(' + XMLHttpRequest.responseText + ')');
            $addToCart.removeClass('is-adding is-added');

            if (!!data.message) {
                if (data.status == 422) {
                    $formContainer.after('<div class="errors qty-error">' + data.description + '</div>');
                }
            }
        };

        setTimeout(function () {
            UpdateTotalPrice();
        }, 100);

        cartUpdateCallback = function cartUpdateCallback(cart) {
            // Update quantity and price
            updateCountPrice(cart);
            buildCart(cart);
        };

        buildCart = function buildCart(cart) {
            // Start with a fresh cart div
            $cartContainer.empty();
            // Show empty cart
            if (cart.item_count === 0) {
                $cartContainer.append('<p class="c-cart__emptyText">Your cart is currently empty.</p>');
                cartCallback(cart);
                return;
            }

            // Handlebars.js cart layout
            var items = [],
                item = {},
                data = {},
                source = $("#CartTemplate").html(),
                template = Handlebars.compile(source);

            // Add each item to our handlebars.js data
            $.each(cart.items, function (index, cartItem) {

                /* Hack to get product image thumbnail
                 *   - If image is not null
                 *     - Remove file extension, add _small, and re-add extension
                 *     - Create server relative link
                 *   - A hard-coded url of no-image
                 */
                if (cartItem.image != null) {
                    var prodImg = cartItem.image.replace(/(\.[^.]*)$/, "_large$1").replace('http:', '');
                } else {
                    var prodImg = "//cdn.shopify.com/s/assets/admin/no-image-medium-cc9732cb976dd349a0df1d39816fbcc7.gif";
                }

                console.log(cartItem);

                // Create item's data object and add to 'items' array
                item = {
                    id: cartItem.variant_id,
                    key: cartItem.key,
                    line: index + 1, // Shopify uses a 1+ index in the API
                    url: cartItem.url,
                    img: prodImg,
                    name: cartItem.product_title,
                    type: cartItem.product_type,
                    variation: cartItem.variant_title,
                    variantSize: cartItem.variant_options[0],
                    variantColor: cartItem.variant_options[1],
                    properties: cartItem.properties,
                    propertiesAmount: cartItem.properties['Discount Amount'],
                    propertiesFrequency: cartItem.properties['Discount Frequency'],
                    propertiesUnit: cartItem.properties['Interval Unit'],
                    propertiesSubscription: cartItem.properties['Subscription'],
                    propertiesSubscriptionAmount: cartItem.properties['Subscription Amount'],
                    propertiesSubscriptionTitle: cartItem.properties['Subscription Product Title'],
                    productLinePrice: cartItem.line_price,
                    productPrice: cartItem.price,

                    itemAdd: cartItem.quantity + 1,
                    itemMinus: cartItem.quantity - 1,
                    itemQty: cartItem.quantity,
                    price: Shopify.formatMoney(cartItem.price, settings.moneyFormat),
                    vendor: cartItem.vendor,
                    linePrice: Shopify.formatMoney(cartItem.line_price, settings.moneyFormat),
                    originalLinePrice: Shopify.formatMoney(cartItem.original_line_price, settings.moneyFormat),
                    discounts: cartItem.discounts,
                    discountsApplied: cartItem.line_price === cartItem.original_line_price ? false : true
                };
                items.push(item);
            });

            // Gather all cart data and add to DOM
            data = {
                items: items,
                note: cart.note,
                totalPrice: Shopify.formatMoney(cart.total_price, settings.moneyFormat),
                datatotalPrice: cart.total_price,
                totalCartDiscount: cart.total_discount === 0 ? 0 : '[savings]'.replace('[savings]', Shopify.formatMoney(cart.total_discount, settings.moneyFormat)),
                totalCartDiscountApplied: cart.total_discount === 0 ? false : true
            };

            $cartContainer.append(template(data));

            cartCallback(cart);

            setTimeout(function () {
                UpdateTotalPrice();
            }, 500);
            
        };

        cartCallback = function cartCallback(cart) {
            $body.removeClass('drawer--is-loading');
            $body.trigger('afterCartLoad.ajaxCart', cart);

            if (window.Shopify && Shopify.StorefrontExpressButtons) {
                Shopify.StorefrontExpressButtons.initialize();
            }
        };

        adjustCart = function adjustCart() {
            // Delegate all events because elements reload with the cart



            $body.on('click', '.ajaxcart__qty--remove', function () {
                if (isUpdating) {
                    return;
                }

                var $el = $(this),
                    line = $el.data('line'),
                    $qtySelector = $el.closest('.c-cart__row').find('.ajaxcart__qty-num'),
                    qty = 0; // remove

                // If it has a data-line, update the cart.
                // Otherwise, just update the input's number
                if (line) {
                    updateQuantity(line, qty);
                } else {
                    $qtySelector.val(qty);
                }
            });

            // Add or remove from the quantity
            $body.on('click', '.ajaxcart__qty-adjust', function () {
                if (isUpdating) {
                    return;
                }

                var $el = $(this),
                    line = $el.data('line'),
                    $qtySelector = $el.siblings('.ajaxcart__qty-num'),
                    qty = parseInt($qtySelector.val().replace(/\D/g, ''));

                var qty = validateQty(qty);

                // Add or subtract from the current quantity
                if ($el.hasClass('ajaxcart__qty--plus')) {
                    qty += 1;
                } else {
                    qty -= 1;
                    if (qty <= 0) qty = 0;
                }

                // If it has a data-line, update the cart.
                // Otherwise, just update the input's number
                if (line) {
                    updateQuantity(line, qty);
                } else {
                    $qtySelector.val(qty);
                }
            });

            // Update quantity based on input on change
            $body.on('change', '.ajaxcart__qty-num', function () {
                if (isUpdating) {
                    return;
                }

                var $el = $(this),
                    line = $el.data('line'),
                    qty = parseInt($el.val().replace(/\D/g, ''));

                var qty = validateQty(qty);

                // If it has a data-line, update the cart
                if (line) {
                    updateQuantity(line, qty);
                }
            });

            // Prevent cart from being submitted while quantities are changing
            $body.on('submit', 'form.ajaxcart', function (evt) {
                if (isUpdating) {
                    evt.preventDefault();
                }
            });

            // Highlight the text when focused
            $body.on('focus', '.ajaxcart__qty-adjust', function () {
                var $el = $(this);
                setTimeout(function () {
                    $el.select();
                }, 50);
            });

            function updateQuantity(line, qty) {
                isUpdating = true;

                // Add activity classes when changing cart quantities
                var $row = $('.ajaxcart__row[data-line="' + line + '"]').addClass('is-loading');

                if (qty === 0) {
                    $row.parent().addClass('is-removed');
                }

                // Slight delay to make sure removed animation is done
                setTimeout(function () {
                    ShopifyAPI.changeItem(line, qty, adjustCartCallback);
                }, 250);
            }

            // Save note anytime it's changed
            $body.on('change', 'textarea[name="note"]', function () {
                var newNote = $(this).val();

                // Update the cart note in case they don't click update/checkout
                ShopifyAPI.updateCartNote(newNote, function (cart) {});
            });
        };

        adjustCartCallback = function adjustCartCallback(cart) {
            // Update quantity and price
            updateCountPrice(cart);

            // Reprint cart on short timeout so you don't see the content being removed
            setTimeout(function () {
                isUpdating = false;
                ShopifyAPI.getCart(buildCart);
            }, 150);
        };

        createQtySelectors = function createQtySelectors() {
            // If there is a normal quantity number field in the ajax cart, replace it with our version
            if ($('input[type="number"]', $cartContainer).length) {
                $('input[type="number"]', $cartContainer).each(function () {
                    var $el = $(this),
                        currentQty = $el.val();

                    var itemAdd = currentQty + 1,
                        itemMinus = currentQty - 1,
                        itemQty = currentQty;

                    var source = $("#AjaxQty").html(),
                        template = Handlebars.compile(source),
                        data = {
                        key: $el.data('id'),
                        itemQty: itemQty,
                        itemAdd: itemAdd,
                        itemMinus: itemMinus
                    };

                    // Append new quantity selector then remove original
                    $el.after(template(data)).remove();
                });
            }
        };

        qtySelectors = function qtySelectors() {
            // Change number inputs to JS ones, similar to ajax cart but without API integration.
            // Make sure to add the existing name and id to the new input element
            var numInputs = $('input[type="number"]');

            if (numInputs.length) {
                numInputs.each(function () {
                    var $el = $(this),
                        currentQty = $el.val(),
                        inputName = $el.attr('name'),
                        inputId = $el.attr('id');

                    var itemAdd = currentQty + 1,
                        itemMinus = currentQty - 1,
                        itemQty = currentQty;

                    var source = $("#JsQty").html(),
                        template = Handlebars.compile(source),
                        data = {
                        key: $el.data('id'),
                        itemQty: itemQty,
                        itemAdd: itemAdd,
                        itemMinus: itemMinus,
                        inputName: inputName,
                        inputId: inputId
                    };

                    // Append new quantity selector then remove original
                    $el.after(template(data)).remove();
                });

                // Setup listeners to add/subtract from the input
                $('.js-qty__adjust').on('click', function () {
                    var $el = $(this),
                        id = $el.data('id'),
                        $qtySelector = $el.siblings('.js-qty__num'),
                        qty = parseInt($qtySelector.val().replace(/\D/g, ''));

                    var qty = validateQty(qty);

                    // Add or subtract from the current quantity
                    if ($el.hasClass('js-qty__adjust--plus')) {
                        qty += 1;
                    } else {
                        qty -= 1;
                        if (qty <= 1) qty = 1;
                    }

                    // Update the input's number
                    $qtySelector.val(qty);
                });
            }
        };

        validateQty = function validateQty(qty) {
            if (parseFloat(qty) == parseInt(qty) && !isNaN(qty)) {
                // We have a valid number!
            } else {
                // Not a number. Default to 1.
                qty = 1;
            }
            return qty;
        };

        module = {
            init: init,
            load: loadCart
        };

        return module;
    }(ajaxCart || {}, jQuery);

    window.ajaxCart = ajaxCart;
})();



(function () {
    if (typeof Shopify === 'undefined') {
        Shopify = {};
    }
    if (!Shopify.formatMoney) {
        Shopify.formatMoney = function (cents, format) {
            var value = '',
                placeholderRegex = /\{\{\s*(\w+)\s*\}\}/,
                formatString = format || this.money_format;

            if (typeof cents == 'string') {
                cents = cents.replace('.', '');
            }

            function defaultOption(opt, def) {
                return typeof opt == 'undefined' ? def : opt;
            }

            function formatWithDelimiters(number, precision, thousands, decimal) {
                precision = defaultOption(precision, 2);
                thousands = defaultOption(thousands, ',');
                decimal = defaultOption(decimal, '.');

                if (isNaN(number) || number == null) {
                    return 0;
                }

                number = (number / 100.0).toFixed(precision);

                var parts = number.split('.'),
                    dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
                    cents = parts[1] ? decimal + parts[1] : '';

                return dollars + cents;
            }

            switch (formatString.match(placeholderRegex)[1]) {
                case 'amount':
                    value = formatWithDelimiters(cents, 2);
                    break;
                case 'amount_no_decimals':
                    value = formatWithDelimiters(cents, 0);
                    break;
                case 'amount_with_comma_separator':
                    value = formatWithDelimiters(cents, 2, '.', ',');
                    break;
                case 'amount_no_decimals_with_comma_separator':
                    value = formatWithDelimiters(cents, 0, '.', ',');
                    break;
            }

            return formatString.replace(placeholderRegex, value);
        };
    }

    $(document).ready(function () {
        var sortContainer = $('.js-sort-container');
        var sortTop = $('.js-sort-top');
        var sortDropdown = $('.js-sort-dropdown');

        sortTop.on('click', function () {
            sortContainer.toggleClass('is-open');
            sortDropdown.toggleClass('is-open');
        });

        $('.js-show-plus-sizes').on('click', function (e) {
            e.preventDefault();
            if ($('.c-product__optionItem--sizePlus')) {
                $('.c-product__optionItem--sizePlus').addClass('show-plus-sizes');
            }
        });
    });

    // size grid 
    $(document).ready(function () {

        $('.js-size-type-select').on('click', function () {
            var type;
            var newSection;
            var firstChart;
            if (!$(this).hasClass('is-active')) {
                $('.js-size-type-select.is-active').removeClass('is-active');
                $(this).addClass('is-active');
                type = $(this).attr('data-type-select');
                $('.js-size-type-section').removeClass('is-visible');

                newSection = $('.js-size-type-section[data-type-section="' + type + '"]');
                newSection.addClass('is-visible');
                // firstChart = newSection.find('.js-chart-section:not(.js-chart-section + .js-chart-section)')
                // firstChart.find('.js-chart-dropdown').addClass('is-open')
                // firstChart.find('.js-toggle-chart-dropdown').addClass('is-open')
            }
        });

        $('.js-toggle-chart-dropdown').on('click', function () {
            var toOpenDropdown;
            var typeSection = $(this).closest('.js-size-type-section');

            if ($(this).hasClass('is-open')) {
                // typeSection.find('.js-chart-dropdown.is-open').hide()
                typeSection.find('.js-chart-dropdown.is-open').removeClass('is-open');
                $(this).removeClass('is-open');
            } else {
                typeSection.find('.js-toggle-chart-dropdown').removeClass('is-open');
                // typeSection.find('.js-chart-dropdown.is-open').hide()
                typeSection.find('.js-chart-dropdown.is-open').removeClass('is-open');

                $(this).addClass('is-open');
                var toOpenDropdown = $(this).closest('.js-chart-section').find('.js-chart-dropdown');
                // toOpenDropdown.show();
                toOpenDropdown.addClass('is-open');
            }
        });

        $('.js-search-open').on('click', function (e) {
            e.preventDefault();
            var $this = $(this);

            if (!$this.hasClass('search-is-open')) {
                $this.closest('.c-headerNav--secondary').addClass('search-is-open');
                $this.addClass('search-is-open');
            } else {
                $this.closest('.c-headerNav--secondary').removeClass('search-is-open');
                $this.removeClass('search-is-open');
            }
        });
    });

    $(document).ready(function () {
        var $window = $(window);

        $window.resize(function () {
            if ($window.width() >= 1024) {
                if ($('.c-offcanvas--left').hasClass('offcanvas-open')) {
                    $('.c-offcanvas--left .c-offcanvas__close').trigger('click');
                }
            }
        });
    });

    $(document).ready(function () {
        function showRecoverPasswordForm() {
            $('#RecoverPasswordForm').show();
            $('#CustomerLoginForm').hide();
        }

        function hideRecoverPasswordForm() {
            $('#RecoverPasswordForm').hide();
            $('#CustomerLoginForm').show();
        }

        $('#RecoverPassword').on('click', function (evt) {
            evt.preventDefault();
            showRecoverPasswordForm();
        });

        $('#HideRecoverPasswordLink').on('click', function (evt) {
            evt.preventDefault();
            hideRecoverPasswordForm();
        });

        // Allow deep linking to recover password form
        if (window.location.hash == '#recover') {
            showRecoverPasswordForm();
        }
    });
})();
(function () {
    window.helpers = window.helpers || {};
    window.helpers.getUrlParameter = function getUrlParameter(sParam) {
        var sPageURL = decodeURIComponent(window.location.search.substring(1)),
            sURLVariables = sPageURL.split('&'),
            sParameterName,
            i;

        for (i = 0; i < sURLVariables.length; i++) {
            sParameterName = sURLVariables[i].split('=');

            if (sParameterName[0] === sParam) {
                return sParameterName[1] === undefined ? true : sParameterName[1];
            }
        }
    };

    // Example
    // var sortBy = getUrlParameter('sort_by')
})();

/*!
 * Accessible Mega Menu
 * @version 0.1
 * @project https://github.com/adobe-accessibility/Accessible-Mega-Menu
 */

/* eslint-disable quotes, no-unreachable, no-useless-escape */
(function ($, window, document) {
    "use strict";

    var pluginName = "accessibleMegaMenu",
        defaults = {
        uuidPrefix: "accessible-megamenu", // unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby
        menuClass: "accessible-megamenu", // default css class used to define the megamenu styling
        topNavItemClass: "accessible-megamenu-top-nav-item", // default css class for a top-level navigation item in the megamenu
        panelClass: "accessible-megamenu-panel", // default css class for a megamenu panel
        panelGroupClass: "accessible-megamenu-panel-group", // default css class for a group of items within a megamenu panel
        hoverClass: "hover", // default css class for the hover state
        focusClass: "focus", // default css class for the focus state
        openClass: "open", // default css class for the open state
        openDelay: 0 // default open delay when opening menu via mouseover
    },
        Keyboard = {
        BACKSPACE: 8,
        COMMA: 188,
        DELETE: 46,
        DOWN: 40,
        END: 35,
        ENTER: 13,
        ESCAPE: 27,
        HOME: 36,
        LEFT: 37,
        PAGE_DOWN: 34,
        PAGE_UP: 33,
        PERIOD: 190,
        RIGHT: 39,
        SPACE: 32,
        TAB: 9,
        UP: 38,
        keyMap: {
            48: "0",
            49: "1",
            50: "2",
            51: "3",
            52: "4",
            53: "5",
            54: "6",
            55: "7",
            56: "8",
            57: "9",
            59: ";",
            65: "a",
            66: "b",
            67: "c",
            68: "d",
            69: "e",
            70: "f",
            71: "g",
            72: "h",
            73: "i",
            74: "j",
            75: "k",
            76: "l",
            77: "m",
            78: "n",
            79: "o",
            80: "p",
            81: "q",
            82: "r",
            83: "s",
            84: "t",
            85: "u",
            86: "v",
            87: "w",
            88: "x",
            89: "y",
            90: "z",
            96: "0",
            97: "1",
            98: "2",
            99: "3",
            100: "4",
            101: "5",
            102: "6",
            103: "7",
            104: "8",
            105: "9",
            190: "."
        }
    };
    /**
     * @desc Creates a new accessible mega menu instance.
     * @param {jquery} element
     * @param {object} [options] Mega Menu options
     * @param {string} [options.uuidPrefix=accessible-megamenu] - Prefix for generated unique id attributes, which are required to indicate aria-owns, aria-controls and aria-labelledby
     * @param {string} [options.menuClass=accessible-megamenu] - CSS class used to define the megamenu styling
     * @param {string} [options.topNavItemClass=accessible-megamenu-top-nav-item] - CSS class for a top-level navigation item in the megamenu
     * @param {string} [options.panelClass=accessible-megamenu-panel] - CSS class for a megamenu panel
     * @param {string} [options.panelGroupClass=accessible-megamenu-panel-group] - CSS class for a group of items within a megamenu panel
     * @param {string} [options.hoverClass=hover] - CSS class for the hover state
     * @param {string} [options.focusClass=focus] - CSS class for the focus state
     * @param {string} [options.openClass=open] - CSS class for the open state
     * @constructor
     */
    function AccessibleMegaMenu(element, options) {
        this.element = element;

        // merge optional settings and defaults into settings
        this.settings = $.extend({}, defaults, options);

        this._defaults = defaults;
        this._name = pluginName;

        this.mouseTimeoutID = null;
        this.focusTimeoutID = null;
        this.mouseFocused = false;
        this.justFocused = false;

        this.init();
    }

    AccessibleMegaMenu.prototype = function () {

        /* private attributes and methods ------------------------ */
        var uuid = 0,
            keydownTimeoutDuration = 1000,
            keydownSearchString = "",
            isTouch = typeof window.hasOwnProperty === "function" && !!window.hasOwnProperty("ontouchstart"),
            _getPlugin,
            _addUniqueId,
            _togglePanel,
            _clickHandler,
            _clickOutsideHandler,
            _DOMAttrModifiedHandler,
            _focusInHandler,
            _focusOutHandler,
            _keyDownHandler,
            _mouseDownHandler,
            _mouseOverHandler,
            _mouseOutHandler,
            _toggleExpandedEventHandlers;

        /**
         * @name jQuery.fn.accessibleMegaMenu~_getPlugin
         * @desc Returns the parent accessibleMegaMenu instance for a given element
         * @param {jQuery} element
         * @memberof jQuery.fn.accessibleMegaMenu
         * @inner
         * @private
         */
        _getPlugin = function _getPlugin(element) {
            return $(element).closest(':data(plugin_' + pluginName + ')').data("plugin_" + pluginName);
        };

        /**
         * @name jQuery.fn.accessibleMegaMenu~_addUniqueId
         * @desc Adds a unique id and element.
         * The id string starts with the
         * string defined in settings.uuidPrefix.
         * @param {jQuery} element
         * @memberof jQuery.fn.accessibleMegaMenu
         * @inner
         * @private
         */
        _addUniqueId = function _addUniqueId(element) {
            element = $(element);
            var settings = this.settings;
            if (!element.attr("id")) {
                element.attr("id", settings.uuidPrefix + "-" + new Date().getTime() + "-" + ++uuid);
            }
        };

        /**
         * @name jQuery.fn.accessibleMegaMenu~_togglePanel
         * @desc Toggle the display of mega menu panels in response to an event.
         * The optional boolean value 'hide' forces all panels to hide.
         * @param {event} event
         * @param {Boolean} [hide] Hide all mega menu panels when true
         * @memberof jQuery.fn.accessibleMegaMenu
         * @inner
         * @private
         */
        _togglePanel = function _togglePanel(event, hide) {
            var target = $(event.target),
                that = this,
                settings = this.settings,
                menu = this.menu,
                topli = target.closest('.' + settings.topNavItemClass),
                panel = target.hasClass(settings.panelClass) ? target : target.closest('.' + settings.panelClass),
                newfocus;

            _toggleExpandedEventHandlers.call(this, true);

            if (hide) {
                topli = menu.find('.' + settings.topNavItemClass + ' .' + settings.openClass + ':first').closest('.' + settings.topNavItemClass);
                if (!(topli.is(event.relatedTarget) || topli.has(event.relatedTarget).length > 0)) {
                    if ((event.type === 'mouseout' || event.type === 'focusout') && topli.has(document.activeElement).length > 0) {
                        return;
                    }
                    topli.find('[aria-expanded]').attr('aria-expanded', 'false').removeClass(settings.openClass).filter('.' + settings.panelClass).attr('aria-hidden', 'true');
                    if (event.type === 'keydown' && event.keyCode === Keyboard.ESCAPE || event.type === 'DOMAttrModified') {
                        newfocus = topli.find(':tabbable:first');
                        setTimeout(function () {
                            menu.find('[aria-expanded].' + that.settings.panelClass).off('DOMAttrModified.accessible-megamenu');
                            newfocus.focus();
                            that.justFocused = false;
                        }, 99);
                    }
                } else if (topli.length === 0) {
                    menu.find('[aria-expanded=true]').attr('aria-expanded', 'false').removeClass(settings.openClass).filter('.' + settings.panelClass).attr('aria-hidden', 'true');
                }
            } else {
                clearTimeout(that.focusTimeoutID);
                topli.siblings().find('[aria-expanded]').attr('aria-expanded', 'false').removeClass(settings.openClass).filter('.' + settings.panelClass).attr('aria-hidden', 'true');
                topli.find('[aria-expanded]').attr('aria-expanded', 'true').addClass(settings.openClass).filter('.' + settings.panelClass).attr('aria-hidden', 'false');
                if (event.type === 'mouseover' && target.is(':tabbable') && topli.length === 1 && panel.length === 0 && menu.has(document.activeElement).length > 0) {
                    target.focus();
                    that.justFocused = false;
                }

                _toggleExpandedEventHandlers.call(that);
            }
        };

        /**
         * @name jQuery.fn.accessibleMegaMenu~_clickHandler
         * @desc Handle click event on mega menu item
         * @param {event} Event object
         * @memberof jQuery.fn.accessibleMegaMenu
         * @inner
         * @private
         */
        _clickHandler = function _clickHandler(event) {
            var target = $(event.target).closest(':tabbable'),
                topli = target.closest('.' + this.settings.topNavItemClass),
                panel = target.closest('.' + this.settings.panelClass);
            if (topli.length === 1 && panel.length === 0 && topli.find('.' + this.settings.panelClass).length === 1) {
                if (!target.hasClass(this.settings.openClass)) {
                    event.preventDefault();
                    event.stopPropagation();
                    _togglePanel.call(this, event);
                    this.justFocused = false;
                } else {
                    if (this.justFocused) {
                        event.preventDefault();
                        event.stopPropagation();
                        this.justFocused = false;
                    } else if (isTouch) {
                        event.preventDefault();
                        event.stopPropagation();
                        _togglePanel.call(this, event, target.hasClass(this.settings.openClass));
                    }
                }
            }
        };

        /**
         * @name jQuery.fn.accessibleMegaMenu~_clickOutsideHandler
         * @desc Handle click event outside of a the megamenu
         * @param {event} Event object
         * @memberof jQuery.fn.accessibleMegaMenu
         * @inner
         * @private
         */
        _clickOutsideHandler = function _clickOutsideHandler(event) {
            if ($(event.target).closest(this.menu).length === 0) {
                event.preventDefault();
                event.stopPropagation();
                _togglePanel.call(this, event, true);
            }
        };

        /**
         * @name jQuery.fn.accessibleMegaMenu~_DOMAttrModifiedHandler
         * @desc Handle DOMAttrModified event on panel to respond to Windows 8 Narrator ExpandCollapse pattern
         * @param {event} Event object
         * @memberof jQuery.fn.accessibleMegaMenu
         * @inner
         * @private
         */
        _DOMAttrModifiedHandler = function _DOMAttrModifiedHandler(event) {
            if (event.originalEvent.attrName === 'aria-expanded' && event.originalEvent.newValue === 'false' && $(event.target).hasClass(this.settings.openClass)) {
                event.preventDefault();
                event.stopPropagation();
                _togglePanel.call(this, event, true);
            }
        };

        /**
         * @name jQuery.fn.accessibleMegaMenu~_focusInHandler
         * @desc Handle focusin event on mega menu item.
         * @param {event} Event object
         * @memberof jQuery.fn.accessibleMegaMenu
         * @inner
         * @private
         */
        _focusInHandler = function _focusInHandler(event) {
            clearTimeout(this.focusTimeoutID);
            var target = $(event.target),
                panel = target.closest('.' + this.settings.panelClass);
            target.addClass(this.settings.focusClass).on('click.accessible-megamenu', $.proxy(_clickHandler, this));
            this.justFocused = !this.mouseFocused;
            this.mouseFocused = false;
            if (this.panels.not(panel).filter('.' + this.settings.openClass).length) {
                _togglePanel.call(this, event);
            }
        };

        /**
         * @name jQuery.fn.accessibleMegaMenu~_focusOutHandler
         * @desc Handle focusout event on mega menu item.
         * @param {event} Event object
         * @memberof jQuery.fn.accessibleMegaMenu
         * @inner
         * @private
         */
        _focusOutHandler = function _focusOutHandler(event) {
            this.justFocused = false;
            var that = this,
                target = $(event.target),
                topli = target.closest('.' + this.settings.topNavItemClass);
            // keepOpen = false;
            target.removeClass(this.settings.focusClass).off('click.accessible-megamenu');

            if (window.cvox) {
                // If ChromeVox is running...
                that.focusTimeoutID = setTimeout(function () {
                    window.cvox.Api.getCurrentNode(function (node) {
                        if (topli.has(node).length) {
                            // and the current node being voiced is in
                            // the mega menu, clearTimeout,
                            // so the panel stays open.
                            clearTimeout(that.focusTimeoutID);
                        } else {
                            that.focusTimeoutID = setTimeout(function (scope, event, hide) {
                                _togglePanel.call(scope, event, hide);
                            }, 275, that, event, true);
                        }
                    });
                }, 25);
            } else {
                that.focusTimeoutID = setTimeout(function () {
                    _togglePanel.call(that, event, true);
                }, 300);
            }
        };

        /**
         * @name jQuery.fn.accessibleMegaMenu~_keyDownHandler
         * @desc Handle keydown event on mega menu.
         * @param {event} Event object
         * @memberof jQuery.fn.accessibleMegaMenu
         * @inner
         * @private
         */
        _keyDownHandler = function _keyDownHandler(event) {
            var that = this.constructor === AccessibleMegaMenu ? this : _getPlugin(this),
                // determine the AccessibleMegaMenu plugin instance
            settings = that.settings,
                target = $($(this).is('.' + settings.hoverClass + ':tabbable') ? this : event.target),
                // if the element is hovered the target is this, otherwise, its the focused element
            menu = that.menu,
                topnavitems = that.topnavitems,
                topli = target.closest('.' + settings.topNavItemClass),
                tabbables = menu.find(':tabbable'),
                panel = target.hasClass(settings.panelClass) ? target : target.closest('.' + settings.panelClass),
                panelGroups = panel.find('.' + settings.panelGroupClass),
                currentPanelGroup = target.closest('.' + settings.panelGroupClass),
                next,
                keycode = event.keyCode || event.which,
                start,
                i,
                o,
                label,
                found = false,
                newString = Keyboard.keyMap[event.keyCode] || '',
                regex,
                isTopNavItem = topli.length === 1 && panel.length === 0;

            if (target.is("input:focus, select:focus, textarea:focus, button:focus")) {
                // if the event target is a form element we should handle keydown normally
                return;
            }

            if (target.is('.' + settings.hoverClass + ':tabbable')) {
                $('html').off('keydown.accessible-megamenu');
            }

            switch (keycode) {
                case Keyboard.ESCAPE:
                    _togglePanel.call(that, event, true);
                    break;
                case Keyboard.DOWN:
                    event.preventDefault();
                    if (isTopNavItem) {
                        _togglePanel.call(that, event);
                        found = topli.find('.' + settings.panelClass + ' :tabbable:first').focus().length === 1;
                    } else {
                        found = tabbables.filter(':gt(' + tabbables.index(target) + '):first').focus().length === 1;
                    }

                    if (!found && window.opera && opera.toString() === "[object Opera]" && (event.ctrlKey || event.metaKey)) {
                        tabbables = $(':tabbable');
                        i = tabbables.index(target);
                        found = $(':tabbable:gt(' + $(':tabbable').index(target) + '):first').focus().length === 1;
                    }
                    break;
                case Keyboard.UP:
                    event.preventDefault();
                    if (isTopNavItem && target.hasClass(settings.openClass)) {
                        _togglePanel.call(that, event, true);
                        next = topnavitems.filter(':lt(' + topnavitems.index(topli) + '):last');
                        if (next.children('.' + settings.panelClass).length) {
                            found = next.children().attr('aria-expanded', 'true').addClass(settings.openClass).filter('.' + settings.panelClass).attr('aria-hidden', 'false').find(':tabbable:last').focus() === 1;
                        }
                    } else if (!isTopNavItem) {
                        found = tabbables.filter(':lt(' + tabbables.index(target) + '):last').focus().length === 1;
                    }

                    if (!found && window.opera && opera.toString() === "[object Opera]" && (event.ctrlKey || event.metaKey)) {
                        tabbables = $(':tabbable');
                        i = tabbables.index(target);
                        found = $(':tabbable:lt(' + $(':tabbable').index(target) + '):first').focus().length === 1;
                    }
                    break;
                case Keyboard.RIGHT:
                    event.preventDefault();
                    if (isTopNavItem) {
                        found = topnavitems.filter(':gt(' + topnavitems.index(topli) + '):first').find(':tabbable:first').focus().length === 1;
                    } else {
                        if (panelGroups.length && currentPanelGroup.length) {
                            // if the current panel contains panel groups, and we are able to focus the first tabbable element of the next panel group
                            found = panelGroups.filter(':gt(' + panelGroups.index(currentPanelGroup) + '):first').find(':tabbable:first').focus().length === 1;
                        }

                        if (!found) {
                            found = topli.find(':tabbable:first').focus().length === 1;
                        }
                    }
                    break;
                case Keyboard.LEFT:
                    event.preventDefault();
                    if (isTopNavItem) {
                        found = topnavitems.filter(':lt(' + topnavitems.index(topli) + '):last').find(':tabbable:first').focus().length === 1;
                    } else {
                        if (panelGroups.length && currentPanelGroup.length) {
                            // if the current panel contains panel groups, and we are able to focus the first tabbable element of the previous panel group
                            found = panelGroups.filter(':lt(' + panelGroups.index(currentPanelGroup) + '):last').find(':tabbable:first').focus().length === 1;
                        }

                        if (!found) {
                            found = topli.find(':tabbable:first').focus().length === 1;
                        }
                    }
                    break;
                case Keyboard.TAB:
                    i = tabbables.index(target);
                    if (event.shiftKey && isTopNavItem && target.hasClass(settings.openClass)) {
                        _togglePanel.call(that, event, true);
                        next = topnavitems.filter(':lt(' + topnavitems.index(topli) + '):last');
                        if (next.children('.' + settings.panelClass).length) {
                            found = next.children().attr('aria-expanded', 'true').addClass(settings.openClass).filter('.' + settings.panelClass).attr('aria-hidden', 'false').find(':tabbable:last').focus();
                        }
                    } else if (event.shiftKey && i > 0) {
                        found = tabbables.filter(':lt(' + i + '):last').focus().length === 1;
                    } else if (!event.shiftKey && i < tabbables.length - 1) {
                        found = tabbables.filter(':gt(' + i + '):first').focus().length === 1;
                    } else if (window.opera && opera.toString() === "[object Opera]") {
                        tabbables = $(':tabbable');
                        i = tabbables.index(target);
                        if (event.shiftKey) {
                            found = $(':tabbable:lt(' + $(':tabbable').index(target) + '):last').focus().length === 1;
                        } else {
                            found = $(':tabbable:gt(' + $(':tabbable').index(target) + '):first').focus().length === 1;
                        }
                    }

                    if (found) {
                        event.preventDefault();
                    }
                    break;
                case Keyboard.SPACE:
                    if (isTopNavItem) {
                        event.preventDefault();
                        _clickHandler.call(that, event);
                    } else {
                        return true;
                    }
                    break;
                case Keyboard.ENTER:
                    return true;
                    break;
                default:
                    // alphanumeric filter
                    clearTimeout(this.keydownTimeoutID);

                    keydownSearchString += newString !== keydownSearchString ? newString : '';

                    if (keydownSearchString.length === 0) {
                        return;
                    }

                    this.keydownTimeoutID = setTimeout(function () {
                        keydownSearchString = '';
                    }, keydownTimeoutDuration);

                    if (isTopNavItem && !target.hasClass(settings.openClass)) {
                        tabbables = tabbables.filter(':not(.' + settings.panelClass + ' :tabbable)');
                    } else {
                        tabbables = topli.find(':tabbable');
                    }

                    if (event.shiftKey) {
                        tabbables = $(tabbables.get().reverse());
                    }

                    for (i = 0; i < tabbables.length; i++) {
                        o = tabbables.eq(i);
                        if (o.is(target)) {
                            start = keydownSearchString.length === 1 ? i + 1 : i;
                            break;
                        }
                    }

                    regex = new RegExp('^' + keydownSearchString.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&'), 'i');

                    for (i = start; i < tabbables.length; i++) {
                        o = tabbables.eq(i);
                        label = $.trim(o.text());
                        if (regex.test(label)) {
                            found = true;
                            o.focus();
                            break;
                        }
                    }
                    if (!found) {
                        for (i = 0; i < start; i++) {
                            o = tabbables.eq(i);
                            label = $.trim(o.text());
                            if (regex.test(label)) {
                                o.focus();
                                break;
                            }
                        }
                    }
                    break;
            }
            that.justFocused = false;
        };

        /**
         * @name jQuery.fn.accessibleMegaMenu~_mouseDownHandler
         * @desc Handle mousedown event on mega menu.
         * @param {event} Event object
         * @memberof accessibleMegaMenu
         * @inner
         * @private
         */
        _mouseDownHandler = function _mouseDownHandler(event) {
            if ($(event.target).is(this.settings.panelClass) || $(event.target).closest(":focusable").length) {
                this.mouseFocused = true;
            }
            clearTimeout(this.mouseTimeoutID);
            this.mouseTimeoutID = setTimeout(function () {
                clearTimeout(this.focusTimeoutID);
            }, 1);
        };

        /**
         * @name jQuery.fn.accessibleMegaMenu~_mouseOverHandler
         * @desc Handle mouseover event on mega menu.
         * @param {event} Event object
         * @memberof jQuery.fn.accessibleMegaMenu
         * @inner
         * @private
         */
        _mouseOverHandler = function _mouseOverHandler(event) {
            clearTimeout(this.mouseTimeoutID);
            var that = this;
            this.mouseTimeoutID = setTimeout(function () {
                $(event.target).addClass(that.settings.hoverClass);
                _togglePanel.call(that, event);
                if ($(event.target).is(':tabbable')) {
                    $('html').on('keydown.accessible-megamenu', $.proxy(_keyDownHandler, event.target));
                }
            }, this.settings.openDelay);
        };

        /**
         * @name jQuery.fn.accessibleMegaMenu~_mouseOutHandler
         * @desc Handle mouseout event on mega menu.
         * @param {event} Event object
         * @memberof jQuery.fn.accessibleMegaMenu
         * @inner
         * @private
         */
        _mouseOutHandler = function _mouseOutHandler(event) {
            clearTimeout(this.mouseTimeoutID);
            var that = this;
            $(event.target).removeClass(that.settings.hoverClass);

            that.mouseTimeoutID = setTimeout(function () {
                _togglePanel.call(that, event, true);
            }, 250);
            if ($(event.target).is(':tabbable')) {
                $('html').off('keydown.accessible-megamenu');
            }
        };

        _toggleExpandedEventHandlers = function _toggleExpandedEventHandlers(hide) {
            var menu = this.menu;
            if (hide) {
                $('html').off('mouseup.outside-accessible-megamenu, touchend.outside-accessible-megamenu, mspointerup.outside-accessible-megamenu,  pointerup.outside-accessible-megamenu');

                menu.find('[aria-expanded].' + this.settings.panelClass).off('DOMAttrModified.accessible-megamenu');
            } else {
                $('html').on('mouseup.outside-accessible-megamenu, touchend.outside-accessible-megamenu, mspointerup.outside-accessible-megamenu,  pointerup.outside-accessible-megamenu', $.proxy(_clickOutsideHandler, this));

                /* Narrator in Windows 8 automatically toggles the aria-expanded property on double tap or click.
                   To respond to the change to collapse the panel, we must add a listener for a DOMAttrModified event. */
                menu.find('[aria-expanded=true].' + this.settings.panelClass).on('DOMAttrModified.accessible-megamenu', $.proxy(_DOMAttrModifiedHandler, this));
            }
        };

        /* public attributes and methods ------------------------- */
        return {
            constructor: AccessibleMegaMenu,

            /**
             * @lends jQuery.fn.accessibleMegaMenu
             * @desc Initializes an instance of the accessibleMegaMenu plugins
             * @memberof jQuery.fn.accessibleMegaMenu
             * @instance
             */
            init: function init() {
                var settings = this.settings,
                    nav = $(this.element),
                    menu = nav.children().first(),
                    topnavitems = menu.children();
                this.start(settings, nav, menu, topnavitems);
            },

            start: function start(settings, nav, menu, topnavitems) {
                var that = this;
                this.settings = settings;
                this.menu = menu;
                this.topnavitems = topnavitems;

                nav.attr("role", "navigation");
                menu.addClass(settings.menuClass);
                topnavitems.each(function (i, topnavitem) {
                    var topnavitemlink, topnavitempanel;
                    topnavitem = $(topnavitem);
                    topnavitem.addClass(settings.topNavItemClass);
                    topnavitemlink = topnavitem.find(":tabbable:first");
                    topnavitempanel = topnavitem.children(":not(:tabbable):last");
                    _addUniqueId.call(that, topnavitemlink);
                    if (topnavitempanel.length) {
                        _addUniqueId.call(that, topnavitempanel);
                        topnavitemlink.attr({
                            // "aria-haspopup": true,
                            "aria-controls": topnavitempanel.attr("id"),
                            "aria-expanded": false
                        });

                        topnavitempanel.attr({
                            "role": "region",
                            "aria-expanded": false,
                            "aria-hidden": true
                        }).addClass(settings.panelClass).not("[aria-labelledby]").attr("aria-labelledby", topnavitemlink.attr("id"));
                    }
                });

                this.panels = menu.find("." + settings.panelClass);

                menu.on("focusin.accessible-megamenu", ":focusable, ." + settings.panelClass, $.proxy(_focusInHandler, this)).on("focusout.accessible-megamenu", ":focusable, ." + settings.panelClass, $.proxy(_focusOutHandler, this)).on("keydown.accessible-megamenu", $.proxy(_keyDownHandler, this)).on("mouseover.accessible-megamenu", $.proxy(_mouseOverHandler, this)).on("mouseout.accessible-megamenu", $.proxy(_mouseOutHandler, this)).on("mousedown.accessible-megamenu", $.proxy(_mouseDownHandler, this));

                if (isTouch) {
                    menu.on("touchstart.accessible-megamenu", $.proxy(_clickHandler, this));
                }

                menu.find("hr").attr("role", "separator");

                if ($(document.activeElement).closest(menu).length) {
                    $(document.activeElement).trigger("focusin.accessible-megamenu");
                }
            },

            /**
             * @desc Get default values
             * @example $(selector).accessibleMegaMenu("getDefaults");
             * @return {object}
             * @memberof jQuery.fn.accessibleMegaMenu
             * @instance
             */
            getDefaults: function getDefaults() {
                return this._defaults;
            },

            /**
             * @desc Get any option set to plugin using its name (as string)
             * @example $(selector).accessibleMegaMenu("getOption", some_option);
             * @param {string} opt
             * @return {string}
             * @memberof jQuery.fn.accessibleMegaMenu
             * @instance
             */
            getOption: function getOption(opt) {
                return this.settings[opt];
            },

            /**
             * @desc Get all options
             * @example $(selector).accessibleMegaMenu("getAllOptions");
             * @return {object}
             * @memberof jQuery.fn.accessibleMegaMenu
             * @instance
             */
            getAllOptions: function getAllOptions() {
                return this.settings;
            },

            /**
             * @desc Set option
             * @example $(selector).accessibleMegaMenu("setOption", "option_name",  "option_value",  reinitialize);
             * @param {string} opt - Option name
             * @param {string} val - Option value
             * @param {boolean} [reinitialize] - boolean to re-initialize the menu.
             * @memberof jQuery.fn.accessibleMegaMenu
             * @instance
             */
            setOption: function setOption(opt, value, reinitialize) {
                this.settings[opt] = value;
                if (reinitialize) {
                    this.init();
                }
            }
        };
    }();

    /**
     * @class accessibleMegaMenu
     * @memberOf jQuery.fn
     * @classdesc Implements an accessible mega menu as a jQuery plugin.
     * @param {object} [options] Mega Menu options
     * @param {string} [options.uuidPrefix=accessible-megamenu] - Prefix for generated unique id attributes, which are required to indicate aria-owns, aria-controls and aria-labelledby
     * @param {string} [options.menuClass=accessible-megamenu] - CSS class used to define the megamenu styling
     * @param {string} [options.topNavItemClass=accessible-megamenu-top-nav-item] - CSS class for a top-level navigation item in the megamenu
     * @param {string} [options.panelClass=accessible-megamenu-panel] - CSS class for a megamenu panel
     * @param {string} [options.panelGroupClass=accessible-megamenu-panel-group] - CSS class for a group of items within a megamenu panel
     * @param {string} [options.hoverClass=hover] - CSS class for the hover state
     * @param {string} [options.focusClass=focus] - CSS class for the focus state
     * @param {string} [options.openClass=open] - CSS class for the open state
     * @param {string} [options.openDelay=0] - Open delay when opening menu via mouseover
     */
    $.fn[pluginName] = function (options) {
        return this.each(function () {
            if (!$.data(this, "plugin_" + pluginName)) {
                $.data(this, "plugin_" + pluginName, new $.fn[pluginName].AccessibleMegaMenu(this, options));
            }
        });
    };

    $.fn[pluginName].AccessibleMegaMenu = AccessibleMegaMenu;

    /**
     * :focusable and :tabbable selectors from
     * https://raw.github.com/jquery/jquery-ui/master/ui/jquery.ui.core.js
     */

    /**
     * @private
     */
    function visible(element) {
        return $.expr.filters.visible(element) && !$(element).parents().addBack().filter(function () {
            return $.css(this, "visibility") === "hidden";
        }).length;
    }

    /**
     * @private
     */
    function _focusable(element, isTabIndexNotNaN) {
        var map,
            mapName,
            img,
            nodeName = element.nodeName.toLowerCase();
        if ("area" === nodeName) {
            map = element.parentNode;
            mapName = map.name;
            if (!element.href || !mapName || map.nodeName.toLowerCase() !== "map") {
                return false;
            }
            img = $("img[usemap=#" + mapName + "]")[0];
            return !!img && visible(img);
        }
        return (/input|select|textarea|button|object/.test(nodeName) ? !element.disabled : "a" === nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) &&
        // the element and all of its ancestors must be visible
        visible(element);
    }

    $.extend($.expr[":"], {
        data: $.expr.createPseudo ? $.expr.createPseudo(function (dataName) {
            return function (elem) {
                return !!$.data(elem, dataName);
            };
        }) : // support: jQuery <1.8
        function (elem, i, match) {
            return !!$.data(elem, match[3]);
        },

        focusable: function focusable(element) {
            return _focusable(element, !isNaN($.attr(element, "tabindex")));
        },

        tabbable: function tabbable(element) {
            var tabIndex = $.attr(element, "tabindex"),
                isTabIndexNaN = isNaN(tabIndex);
            return (isTabIndexNaN || tabIndex >= 0) && _focusable(element, !isTabIndexNaN);
        }
    });
})(jQuery, window, document);
/* global $ */
$(function () {
    var iPad = navigator.userAgent.match(/iPad/i) !== null;
    var topNavItemClass = 'c-megamenu__navitem';
    var panelClass = 'c-megamenu__subnav';
    var panelGroupClass = 'c-megamenu__subnavGroup';
    var topNavItemElem = $('.' + topNavItemClass);

    if (iPad) {
        // Add class to top level link
        topNavItemElem.find('> a').addClass('not-clicked');

        // Loop through each top level
        topNavItemElem.each(function () {
            var navItem = $(this);

            // On first click prevent default and show menu
            // On second click go to the link
            navItem.find('a:not(.no-menu a)').on('touchend', function (event) {
                var _this = $(this);

                if (_this.hasClass('not-clicked')) {
                    event.preventDefault();

                    // Hide all panels
                    topNavItemElem.find('.' + panelClass).removeClass('open');

                    // Show this panel
                    _this.parent().find('.' + panelClass).addClass('open');

                    // Add class back to all links
                    topNavItemElem.find('> a').addClass('not-clicked');

                    // Remove class from this link
                    _this.removeClass('not-clicked');
                } else {
                    // Go to the link
                    window.location = _this.attr('href');
                }
            }).on('click', function (event) {
                event.preventDefault();
            });
        });
    } else {
        // Init the accessible mega menu
        $('.js-megamenu').accessibleMegaMenu({
            topNavItemClass: topNavItemClass,
            panelClass: panelClass,
            panelGroupClass: panelGroupClass
        });
    }
});
/*!
 * Modal
 * @version 0.0.1
 * @author  Jason Alvis
 */
console.log("rads");
(function (factory) {
    /* eslint-disable */
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module depending on jQuery.
        define(['jquery'], factory);
    } else {
        // No AMD. Register plugin with global jQuery object.
        factory(jQuery);
    }
})(function ($) {
    /* eslint-enable */

    'use strict';

    /**
     * Private variables
     */

    var nameSpace = 'modal';
    var eventNameSpace = '.' + nameSpace;
    var emptyIframe = '//about:blank';

    /**
     * Modal constructor
     * @param {HTMLElement|jQuery} element - The element to create the modal for
     * @param {Object} options             - The options
     */

    var Modal = function Modal(element, options) {
        /**
         * DOM modal element
         * @type {Object}
         */

        this.element = element;

        /**
         * Current options
         * @type {Object}
         */

        this.options = options;

        /**
         * Init
         */

        this.init();
    };

    /**
     * Which transition event
     * Utility method to determine which transistionend event is supported
     * @private
     */

    function whichTransitionEvent() {
        var t;
        var el = document.createElement('fake');
        var transitions = {
            'transition': 'transitionend',
            'OTransition': 'oTransitionEnd',
            'MozTransition': 'transitionend',
            'WebkitTransition': 'webkitTransitionEnd'
        };

        for (t in transitions) {
            if (el.style[t] !== undefined) {
                return transitions[t];
            }
        }
    }

    /**
     * Check if we should close or not
     * @param {Object} target - The target
     * @param {Object} modal  - The modal
     * @private
     */

    function checkIfClose(target, modal) {
        var content = modal.modalContent;

        // We close the popup if click is on close button.
        if ($(target).hasClass('js-modal-close') || $(target).parent().hasClass('js-modal-close')) {
            return true;
        }

        // If click is outside the content
        if (target !== content[0] && !$.contains(content[0], target)) {
            // last check, if the clicked element is in DOM, (in case it's removed onclick)
            if ($.contains(document, target)) {
                return true;
            }
        }

        return false;
    }

    /**
     * Bind events
     * @private
     */

    function setFocus() {
        // If a focus element has been specified use it
        // Else just focus the modal
        if (this.options.focus) {
            this.modalContent.find(this.options.focus).eq(0).focus();
        } else {
            this.modal.focus();
        }

        return false;
    }

    /**
     * Bind events
     * @param {Boolean} remove - Remove events
     * @private
     */

    function modalEvents(remove) {
        var _this = this;

        // Overlay
        if (remove) {
            $(this.overlay).off('click' + eventNameSpace);
        } else {
            $(this.overlay).on('click' + eventNameSpace, function () {
                _this.close();
            });
        }

        // Modal (includes close button)
        if (remove) {
            $(this.modal).off('click' + eventNameSpace);
        } else {
            $(this.modal).on('click' + eventNameSpace, function (event) {
                if (checkIfClose(event.target, _this)) {
                    _this.close();
                }
            });
        }

        // Close on ESC key
        if (remove) {
            $(document).off('keyup' + eventNameSpace + ' focusin' + eventNameSpace); // includes focusin too
        } else {
            $(document).on('keyup' + eventNameSpace, function (event) {
                if (event.keyCode === 27) {
                    _this.close();
                }
            });
        }
    }

    /**
     * Modal trigger events
     * @param {String} event - Callback event name
     * @private
     */

    function modalTrigger(event) {
        if (this.options.callbacks && this.options.callbacks[event]) {
            this.options.callbacks[event].apply(this);
        }
    }

    /**
     * Build functionality
     * @private
     */

    function build() {
        var options = this.options;
        var source;
        var docFrag;

        // Create a DocumentFragment to build with
        // Main containers should only be created only once
        docFrag = document.createDocumentFragment();

        /**
         * Overlay
         */

        if (!this.overlay) {
            this.overlay = document.createElement('div');
            this.overlay.className = 'c-modal-overlay';

            // Add additional class if set
            if (options.modifier) {
                this.overlay.classList.add(options.modifier);
            }

            // Add type modifier classes
            if (options.type) {
                this.overlay.classList.add('c-modal--' + options.type);
            }
        }

        /**
         * Modal
         */

        if (!this.modal) {
            this.modal = document.createElement('div');
            this.modal.className = 'c-modal';
            this.modal.tabIndex = '-1';

            // Add additional class if set
            if (options.modifier) {
                this.modal.classList.add(options.modifier);
            }

            // Add type modifier classes
            if (options.type) {
                this.modal.classList.add('c-modal--' + options.type);
            }
        }

        /**
         * Modal wrap
         */

        if (!this.modalWrap) {
            this.modalWrap = document.createElement('div');
            this.modalWrap.className = 'c-modal__wrap';
        }

        /**
         * Modal inner
         */

        if (!this.modalInner) {
            this.modalInner = document.createElement('div');
            this.modalInner.className = 'c-modal__inner';
        }

        /**
         * Trigger beforeOpen callback
         */

        modalTrigger.call(this, 'beforeOpen');

        /*
         * Build the source.
         */

        if (options.type === 'iframe') {
            source = buildIframe.call(this);
        } else {
            source = buildInline.call(this);
        }

        // If no content build empty markup
        if (!source) {
            source = buildEmpty.call(this);
        }

        // Set the content
        this.modalContent = $(source);

        // Append the source into the holder
        $(this.modalInner).html(source);

        // Append the holder into the wrap
        this.modalWrap.appendChild(this.modalInner);

        // Append the wrap to the modal
        this.modal.appendChild(this.modalWrap);

        // Append overlay to DocumentFragment
        docFrag.appendChild(this.overlay);

        // Append modal to DocumentFragment
        docFrag.appendChild(this.modal);

        // Modal events (add)
        modalEvents.call(this);

        // Append DocumentFragment to body
        document.body.appendChild(docFrag);
    }

    /**
     * Build empty
     * @private
     */

    function buildEmpty() {
        var source = document.createElement('div');
        source.className = 'c-modal__empty';
        source.innerHTML = 'No content found.';

        return source;
    }

    /**
     * Build inline
     * @private
     */

    function buildInline() {
        var source = document.querySelector(this.modalSource);

        // If no source return
        if (!source) {
            return false;
        }

        // Create a placeholder
        var placeholder = document.createElement('div');
        placeholder.classList.add(this.options.hiddenClass);

        // Replace content with a placeholder and store it as the last position
        this.lastPosition = $(placeholder).insertBefore(source);

        // Remove the hidden class from the content so it can display
        source.classList.remove(this.options.hiddenClass);

        // If aria tag exist change the value
        if (source.hasAttribute('aria-hidden')) {
            source.setAttribute('aria-hidden', false);
        }

        // Add close button if required
        if (this.options.showCloseButton === true) {
            if (!this.closeButton) {
                var wrapper = document.createElement('div');
                wrapper.innerHTML = this.options.closeMarkup;

                this.closeButton = wrapper.firstChild;
            }

            source.appendChild(this.closeButton);
        }

        return source;
    }

    /**
     * Build iframe
     * @private
     */

    function buildIframe() {
        var iframeOptions = this.options.iframe;
        var source = this.modalSource;

        // Set patterns if none have been passed
        if (!iframeOptions.patterns) {
            iframeOptions.patterns = {
                // http://www.youtube.com/watch?v=<id>
                youtube: {
                    index: 'youtube.com',
                    id: 'v=',
                    src: '//www.youtube.com/embed/%id%?autoplay=1&showinfo=0&rel=0'
                },
                // http://vimeo.com/<id>
                vimeo: {
                    index: 'vimeo.com/',
                    id: '/',
                    src: '//player.vimeo.com/video/%id%?autoplay=1'
                }
            };
        }

        // Set markup if none has been passed
        if (!iframeOptions.markup) {
            iframeOptions.markup = '<div class="c-modal__iframeWrap">' + this.options.closeMarkup + '<iframe class="c-modal__iframe" src="' + emptyIframe + '" frameborder="0" allowfullscreen></iframe>' + '</div>';
        }

        // Loop through each pattern
        $.each(iframeOptions.patterns, function () {
            if (source.indexOf(this.index) > -1) {
                if (this.id) {
                    if (typeof this.id === 'string') {
                        source = source.substr(source.lastIndexOf(this.id) + this.id.length, source.length);
                    } else {
                        source = this.id.call(this, source);
                    }
                }

                source = this.src.replace('%id%', source);

                return false;
            }
        });

        // Build markup
        source = $(iframeOptions.markup.replace(emptyIframe, source));

        return source;
    }

    /**
     * Default options
     * @public
     */

    Modal.prototype.defaults = {
        showCloseButton: true,
        closeMarkup: '<button type="button" class="js-modal-close c-modal__close" aria-label="Close">\n        <svg class="c-modal__closeIcon" width="16px" height="16px" viewBox="0 0 16 16" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n            <g id="category" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round">\n                <g id="375-04-category-sort@2x" transform="translate(-329.000000, -30.000000)" stroke-width="2" stroke="#000000">\n                    <g id="icon-close" transform="translate(330.000000, 31.000000)">\n                        <g id="error-1">\n                            <path d="M0,0 L14,14" id="Line"></path>\n                            <path d="M0,0 L14,14" id="Line-Copy" transform="translate(7.000000, 7.000000) scale(-1, 1) translate(-7.000000, -7.000000) "></path>\n                        </g>\n                    </g>\n                </g>\n            </g>\n        </svg>\n    </button>',
        hiddenClass: 'u-hide',
        openClass: 'modal-open',
        modifier: null,
        focus: null,
        type: null,
        iframe: {},
        callbacks: null
    };

    /**
     * Init the modal
     * @public
     */

    Modal.prototype.init = function () {
        // Introduce defaults that can be extended either
        // globally or using an object literal.
        this.options = $.extend({}, this.defaults, this.options);

        // Get the source
        this.modalSource = this.element.hasAttribute('data-modal-src') ? this.element.getAttribute('data-modal-src') : this.element.getAttribute('href');

        // Add click listener
        $(this.element).on('click' + eventNameSpace, $.proxy(this.open, this));

        return this;
    };

    /**
     * Open
     * @public
     */

    Modal.prototype.open = function (event) {
        var _this = this;
        var transitionEvent = whichTransitionEvent();

        // Prevent default if event exists
        if (event && event.type) {
            event.preventDefault();

            // In case its already open, don't open any more
            if (this.isOpen) {
                event.stopPropagation();
            }
        }

        // Build the modal
        build.call(this);

        // Save last focused element
        this.lastFocusedElement = document.activeElement;

        /*
         * After adding elements to the DOM, use getComputedStyle
         * to force the browser to recalc and recognize the elements
         * that we just added. This is so that CSS animation has a start point
         */

        window.getComputedStyle(this.modal).height;

        // Add the open class name
        document.body.classList.add(this.options.openClass);
        this.modal.classList.add(this.options.openClass);
        this.overlay.classList.add(this.options.openClass);

        // Trap the focus in popup after its finished transitioning
        $(this.modal).one(transitionEvent, function () {
            $(document).on('focusin' + eventNameSpace, setFocus.call(_this));
        });

        // Set status to open
        this.isOpen = true;

        /**
         * Trigger open callback
         */

        modalTrigger.call(this, 'open');
    };

    /**
     * Close
     * @public
     */

    Modal.prototype.close = function () {
        // If its not open do nothing
        if (!this.isOpen) {
            return;
        }

        /**
         * Trigger beforeClose callback
         */

        modalTrigger.call(this, 'beforeClose');

        var _this = this;
        var options = this.options;
        var overlay = this.overlay;
        var modal = this.modal;
        var content = this.modalContent;
        var transitionEvent = whichTransitionEvent();

        // Remove the open class name
        document.body.classList.remove(options.openClass);
        modal.classList.remove(options.openClass);
        overlay.classList.remove(options.openClass);

        // Set status to false
        this.isOpen = false;

        // Overlay transition event
        $(overlay).one(transitionEvent, function () {
            if (overlay.parentNode) {
                overlay.parentNode.removeChild(overlay);
            }
        });

        // Modal transition event
        $(modal).one(transitionEvent, function () {
            if (modal.parentNode) {
                modal.parentNode.removeChild(modal);
            }

            // Iframe (remove the src)
            if (options.type === 'iframe') {
                _this.modalContent.find('iframe')[0].src = emptyIframe;
            }

            // If last position exists the content has been moved and we need to put it back
            if (_this.lastPosition) {
                // Add the hidden class to the content
                content.addClass(options.hiddenClass);

                // Remove the close button if we added one
                if (options.showCloseButton === true) {
                    content.find(_this.closeButton).remove();
                }

                // If aria tag exist change the value
                if (content.attr('aria-hidden')) {
                    content.attr('aria-hidden', true);
                }

                // Insert the content back to its last position
                _this.lastPosition.after(content);

                // Remove the placeholder from the dom
                _this.lastPosition.remove();

                // Set the placeholder back to null
                _this.lastPosition = null;
            }
        });

        // Modal events (remove)
        modalEvents.call(this, true);

        // Put focus back on the last focused element
        if (this.lastFocusedElement) {
            $(this.lastFocusedElement).focus();
        }

        /**
         * Trigger close callback
         */

        modalTrigger.call(_this, 'close');
    };

    /**
     * jQuery Modal interface
     * @param  {Object} options - The options
     * @return {Object}         - The modal object
     */

    $.fn.modal = function (options) {
        var args = Array.prototype.slice.call(arguments, 1);

        return this.each(function () {
            var item = $(this),
                data = item.data('modal');

            if (!data) {
                // create modal data if not created
                item.data('modal', new Modal(this, options));
            } else {
                // otherwise check arguments for method call
                if (typeof options === 'string') {
                    data[options].apply(data, args);
                }
            }
        });
    };
});

/*!
 * Offcanvas
 * @version 0.0.1
 * @author  Jason Alvis
 */

(function (factory) {
    /* eslint-disable */
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module depending on jQuery.
        define(['jquery'], factory);
    } else {
        // No AMD. Register plugin with global jQuery object.
        factory(jQuery);
    }
})(function ($) {
    /* eslint-enable */

    'use strict';

    /**
     * Private variables
     */

    var nameSpace = 'offcanvas';
    var eventNameSpace = '.' + nameSpace;
    var isOpen = false;
    var overlay;

    /**
     * Offcanvas constructor
     * @param {HTMLElement|jQuery} element - The element to create the offcanvas for
     * @param {Object} options             - The options
     */

    var Offcanvas = function Offcanvas(element, options) {
        /**
         * DOM offcanvas element  
         * @type {Object}
         */

        this.element = element;

        /**
         * Current options
         * @type {Object}
         */

        this.options = options;

        /**
         * Init
         */

        this.init();
    };

    /**
     * Which transition event
     * Utility method to determine which transistionend event is supported
     * @private
     */

    function whichTransitionEvent() {
        var t;
        var el = document.createElement('fake');
        var transitions = {
            'transition': 'transitionend',
            'OTransition': 'oTransitionEnd',
            'MozTransition': 'transitionend',
            'WebkitTransition': 'webkitTransitionEnd'
        };

        for (t in transitions) {
            if (el.style[t] !== undefined) {
                return transitions[t];
            }
        }
    }

    /**
     * Offcanvas trigger events
     * @param {String} event - Callback event name
     * @private
     */

    function offcanvasTrigger(event) {
        if (this.options.callbacks && this.options.callbacks[event]) {
            this.options.callbacks[event].apply(this);
        }
    }

    /**
     * Build functionality
     * @private
     */

    function build() {
        var docFrag;

        // Create a DocumentFragment to build with
        // Main containers should only be created only once
        docFrag = document.createDocumentFragment();

        if (!overlay) {
            overlay = document.createElement('a');
            overlay.className = 'c-offcanvas-overlay';
            overlay.setAttribute('href', '#');
            overlay.innerHTML = '<span class="u-hideVisually">Exit Menu</span>';
        }

        // Append overlay markup to DocumentFragment
        docFrag.appendChild(overlay);

        // Append DocumentFragment to body
        document.body.appendChild(docFrag);

        // Add click event to overlay markup
        $(overlay).on('click' + eventNameSpace, $.proxy(this.close, this));
    }

    /**
     * Default options
     * @public
     */

    Offcanvas.prototype.defaults = {
        openClass: 'offcanvas-open',
        closeElement: '.c-offcanvas__close',
        showOverlay: true,
        callbacks: null
    };

    /**
     * Init the offcanvas
     * @public
     */

    Offcanvas.prototype.init = function () {
        // Introduce defaults that can be extended either
        // globally or using an object literal.
        this.options = $.extend({}, this.defaults, this.options);

        // Get the source
        this.offcanvasSource = this.element.hasAttribute('data-offcanvas-src') ? this.element.getAttribute('data-offcanvas-src') : this.element.getAttribute('href');

        // Get the content
        this.offcanvasContent = document.querySelector(this.offcanvasSource);

        // If no content do nothing
        if (!this.offcanvasContent) {
            return;
        }

        // Add click listener to element
        $(this.element).on('click' + eventNameSpace, $.proxy(this.toggle, this));

        return this;
    };

    /**
     * Toggle
     * @public
     */

    Offcanvas.prototype.toggle = function (event) {
        // Prevent default if event exists
        if (event && event.type) {
            event.preventDefault();
        }

        // Toggle open/close class
        if (!isOpen) {
            this.open();
        } else {
            this.close();
        }
    };

    /**
     * Open
     * @public
     */

    Offcanvas.prototype.open = function () {
        var _this = this;

        /**
         * Trigger beforeOpen callback
         */

        offcanvasTrigger.call(this, 'beforeOpen');

        // Aria tags
        this.element.setAttribute('aria-expanded', true);
        this.offcanvasContent.setAttribute('aria-hidden', false);

        // Build overlay
        if (this.options.showOverlay) {
            build.call(this);
        }

        // Bind click to close element
        $(this.options.closeElement).on('click' + eventNameSpace, $.proxy(this.close, this));

        // Bind ESC to close element
        $(document).on('keyup' + eventNameSpace, function (event) {
            if (event.keyCode === 27) {
                _this.close();
            }
        });

        // Add open class to elements
        setTimeout(function () {
            _this.offcanvasContent.classList.add(_this.options.openClass);
            document.querySelector('body').classList.add(_this.options.openClass);
        }, 20);

        // Set status
        isOpen = true;

        /**
         * Trigger open callback
         */

        offcanvasTrigger.call(this, 'open');
    };

    /**
     * Close
     * @public
     */

    Offcanvas.prototype.close = function (event) {
        // Prevent default if event exists
        if (event && event.type) {
            event.preventDefault();
        }

        /**
         * Trigger beforeClose callback
         */

        offcanvasTrigger.call(this, 'beforeClose');

        // Aria tags
        this.element.setAttribute('aria-expanded', false);
        this.offcanvasContent.setAttribute('aria-hidden', true);

        // Overlay
        if (this.options.showOverlay) {
            var transitionEvent = whichTransitionEvent();

            // Remove click event from overlay markup
            $(overlay).off('click' + eventNameSpace);

            // Remove overlay markup when transition had finished
            $(overlay).one(transitionEvent, function () {
                if (overlay.parentNode) {
                    overlay.parentNode.removeChild(overlay);
                }
            });
        }

        // Remove click event from close element
        $(this.options.closeElement).off('click' + eventNameSpace);

        // Remove ESC event to close element
        $(document).off('keyup' + eventNameSpace);

        // Remove open class from elements
        this.offcanvasContent.classList.remove(this.options.openClass);
        document.querySelector('body').classList.remove(this.options.openClass);

        // Set status
        isOpen = false;

        /**
         * Trigger close callback
         */

        offcanvasTrigger.call(this, 'close');
    };

    /**
     * jQuery Offcanvas interface
     * @param  {Object} options - The options
     * @return {Object}         - The offcanvas object
     */

    $.fn.offcanvas = function (options) {
        var args = Array.prototype.slice.call(arguments, 1);

        return this.each(function () {
            var item = $(this),
                data = item.data('offcanvas');

            if (!data) {
                // create offcanvas data if not created
                item.data('offcanvas', new Offcanvas(this, options));
            } else {
                // otherwise check arguments for method call
                if (typeof options === 'string') {
                    data[options].apply(data, args);
                }
            }
        });
    };
});

!function (i) {
    "use strict";
    "function" == typeof define && define.amd ? define(["jquery"], i) : "undefined" != typeof exports ? module.exports = i(require("jquery")) : i(jQuery);
}(function (i) {
    "use strict";
    var e = window.Slick || {};(e = function () {
        var e = 0;return function (t, o) {
            var s,
                n = this;n.defaults = { accessibility: !0, adaptiveHeight: !1, appendArrows: i(t), appendDots: i(t), arrows: !0, asNavFor: null, prevArrow: '<button class="slick-prev" aria-label="Previous" type="button">Previous</button>', nextArrow: '<button class="slick-next" aria-label="Next" type="button">Next</button>', autoplay: !1, autoplaySpeed: 3e3, centerMode: !1, centerPadding: "50px", cssEase: "ease", customPaging: function customPaging(e, t) {
                    return i('<button type="button" />').text(t + 1);
                }, dots: !1, dotsClass: "slick-dots", draggable: !0, easing: "linear", edgeFriction: .35, fade: !1, focusOnSelect: !1, focusOnChange: !1, infinite: !0, initialSlide: 0, lazyLoad: "ondemand", mobileFirst: !1, pauseOnHover: !0, pauseOnFocus: !0, pauseOnDotsHover: !1, respondTo: "window", responsive: null, rows: 1, rtl: !1, slide: "", slidesPerRow: 1, slidesToShow: 1, slidesToScroll: 1, speed: 500, swipe: !0, swipeToSlide: !1, touchMove: !0, touchThreshold: 5, useCSS: !0, useTransform: !0, variableWidth: !1, vertical: !1, verticalSwiping: !1, waitForAnimate: !0, zIndex: 1e3 }, n.initials = { animating: !1, dragging: !1, autoPlayTimer: null, currentDirection: 0, currentLeft: null, currentSlide: 0, direction: 1, $dots: null, listWidth: null, listHeight: null, loadIndex: 0, $nextArrow: null, $prevArrow: null, scrolling: !1, slideCount: null, slideWidth: null, $slideTrack: null, $slides: null, sliding: !1, slideOffset: 0, swipeLeft: null, swiping: !1, $list: null, touchObject: {}, transformsEnabled: !1, unslicked: !1 }, i.extend(n, n.initials), n.activeBreakpoint = null, n.animType = null, n.animProp = null, n.breakpoints = [], n.breakpointSettings = [], n.cssTransitions = !1, n.focussed = !1, n.interrupted = !1, n.hidden = "hidden", n.paused = !0, n.positionProp = null, n.respondTo = null, n.rowCount = 1, n.shouldClick = !0, n.$slider = i(t), n.$slidesCache = null, n.transformType = null, n.transitionType = null, n.visibilityChange = "visibilitychange", n.windowWidth = 0, n.windowTimer = null, s = i(t).data("slick") || {}, n.options = i.extend({}, n.defaults, o, s), n.currentSlide = n.options.initialSlide, n.originalSettings = n.options, void 0 !== document.mozHidden ? (n.hidden = "mozHidden", n.visibilityChange = "mozvisibilitychange") : void 0 !== document.webkitHidden && (n.hidden = "webkitHidden", n.visibilityChange = "webkitvisibilitychange"), n.autoPlay = i.proxy(n.autoPlay, n), n.autoPlayClear = i.proxy(n.autoPlayClear, n), n.autoPlayIterator = i.proxy(n.autoPlayIterator, n), n.changeSlide = i.proxy(n.changeSlide, n), n.clickHandler = i.proxy(n.clickHandler, n), n.selectHandler = i.proxy(n.selectHandler, n), n.setPosition = i.proxy(n.setPosition, n), n.swipeHandler = i.proxy(n.swipeHandler, n), n.dragHandler = i.proxy(n.dragHandler, n), n.keyHandler = i.proxy(n.keyHandler, n), n.instanceUid = e++, n.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/, n.registerBreakpoints(), n.init(!0);
        };
    }()).prototype.activateADA = function () {
        this.$slideTrack.find(".slick-active").attr({ "aria-hidden": "false" }).find("a, input, button, select").attr({ tabindex: "0" });
    }, e.prototype.addSlide = e.prototype.slickAdd = function (e, t, o) {
        var s = this;if ("boolean" == typeof t) o = t, t = null;else if (t < 0 || t >= s.slideCount) return !1;s.unload(), "number" == typeof t ? 0 === t && 0 === s.$slides.length ? i(e).appendTo(s.$slideTrack) : o ? i(e).insertBefore(s.$slides.eq(t)) : i(e).insertAfter(s.$slides.eq(t)) : !0 === o ? i(e).prependTo(s.$slideTrack) : i(e).appendTo(s.$slideTrack), s.$slides = s.$slideTrack.children(this.options.slide), s.$slideTrack.children(this.options.slide).detach(), s.$slideTrack.append(s.$slides), s.$slides.each(function (e, t) {
            i(t).attr("data-slick-index", e);
        }), s.$slidesCache = s.$slides, s.reinit();
    }, e.prototype.animateHeight = function () {
        var i = this;if (1 === i.options.slidesToShow && !0 === i.options.adaptiveHeight && !1 === i.options.vertical) {
            var e = i.$slides.eq(i.currentSlide).outerHeight(!0);i.$list.animate({ height: e }, i.options.speed);
        }
    }, e.prototype.animateSlide = function (e, t) {
        var o = {},
            s = this;s.animateHeight(), !0 === s.options.rtl && !1 === s.options.vertical && (e = -e), !1 === s.transformsEnabled ? !1 === s.options.vertical ? s.$slideTrack.animate({ left: e }, s.options.speed, s.options.easing, t) : s.$slideTrack.animate({ top: e }, s.options.speed, s.options.easing, t) : !1 === s.cssTransitions ? (!0 === s.options.rtl && (s.currentLeft = -s.currentLeft), i({ animStart: s.currentLeft }).animate({ animStart: e }, { duration: s.options.speed, easing: s.options.easing, step: function step(i) {
                i = Math.ceil(i), !1 === s.options.vertical ? (o[s.animType] = "translate(" + i + "px, 0px)", s.$slideTrack.css(o)) : (o[s.animType] = "translate(0px," + i + "px)", s.$slideTrack.css(o));
            }, complete: function complete() {
                t && t.call();
            } })) : (s.applyTransition(), e = Math.ceil(e), !1 === s.options.vertical ? o[s.animType] = "translate3d(" + e + "px, 0px, 0px)" : o[s.animType] = "translate3d(0px," + e + "px, 0px)", s.$slideTrack.css(o), t && setTimeout(function () {
            s.disableTransition(), t.call();
        }, s.options.speed));
    }, e.prototype.getNavTarget = function () {
        var e = this,
            t = e.options.asNavFor;return t && null !== t && (t = i(t).not(e.$slider)), t;
    }, e.prototype.asNavFor = function (e) {
        var t = this.getNavTarget();null !== t && "object" == (typeof t === 'undefined' ? 'undefined' : _typeof(t)) && t.each(function () {
            var t = i(this).slick("getSlick");t.unslicked || t.slideHandler(e, !0);
        });
    }, e.prototype.applyTransition = function (i) {
        var e = this,
            t = {};!1 === e.options.fade ? t[e.transitionType] = e.transformType + " " + e.options.speed + "ms " + e.options.cssEase : t[e.transitionType] = "opacity " + e.options.speed + "ms " + e.options.cssEase, !1 === e.options.fade ? e.$slideTrack.css(t) : e.$slides.eq(i).css(t);
    }, e.prototype.autoPlay = function () {
        var i = this;i.autoPlayClear(), i.slideCount > i.options.slidesToShow && (i.autoPlayTimer = setInterval(i.autoPlayIterator, i.options.autoplaySpeed));
    }, e.prototype.autoPlayClear = function () {
        var i = this;i.autoPlayTimer && clearInterval(i.autoPlayTimer);
    }, e.prototype.autoPlayIterator = function () {
        var i = this,
            e = i.currentSlide + i.options.slidesToScroll;i.paused || i.interrupted || i.focussed || (!1 === i.options.infinite && (1 === i.direction && i.currentSlide + 1 === i.slideCount - 1 ? i.direction = 0 : 0 === i.direction && (e = i.currentSlide - i.options.slidesToScroll, i.currentSlide - 1 == 0 && (i.direction = 1))), i.slideHandler(e));
    }, e.prototype.buildArrows = function () {
        var e = this;!0 === e.options.arrows && (e.$prevArrow = i(e.options.prevArrow).addClass("slick-arrow"), e.$nextArrow = i(e.options.nextArrow).addClass("slick-arrow"), e.slideCount > e.options.slidesToShow ? (e.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"), e.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"), e.htmlExpr.test(e.options.prevArrow) && e.$prevArrow.prependTo(e.options.appendArrows), e.htmlExpr.test(e.options.nextArrow) && e.$nextArrow.appendTo(e.options.appendArrows), !0 !== e.options.infinite && e.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true")) : e.$prevArrow.add(e.$nextArrow).addClass("slick-hidden").attr({ "aria-disabled": "true", tabindex: "-1" }));
    }, e.prototype.buildDots = function () {
        var e,
            t,
            o = this;if (!0 === o.options.dots) {
            for (o.$slider.addClass("slick-dotted"), t = i("<ul />").addClass(o.options.dotsClass), e = 0; e <= o.getDotCount(); e += 1) {
                t.append(i("<li />").append(o.options.customPaging.call(this, o, e)));
            }o.$dots = t.appendTo(o.options.appendDots), o.$dots.find("li").first().addClass("slick-active");
        }
    }, e.prototype.buildOut = function () {
        var e = this;e.$slides = e.$slider.children(e.options.slide + ":not(.slick-cloned)").addClass("slick-slide"), e.slideCount = e.$slides.length, e.$slides.each(function (e, t) {
            i(t).attr("data-slick-index", e).data("originalStyling", i(t).attr("style") || "");
        }), e.$slider.addClass("slick-slider"), e.$slideTrack = 0 === e.slideCount ? i('<div class="slick-track"/>').appendTo(e.$slider) : e.$slides.wrapAll('<div class="slick-track"/>').parent(), e.$list = e.$slideTrack.wrap('<div class="slick-list"/>').parent(), e.$slideTrack.css("opacity", 0), !0 !== e.options.centerMode && !0 !== e.options.swipeToSlide || (e.options.slidesToScroll = 1), i("img[data-lazy]", e.$slider).not("[src]").addClass("slick-loading"), e.setupInfinite(), e.buildArrows(), e.buildDots(), e.updateDots(), e.setSlideClasses("number" == typeof e.currentSlide ? e.currentSlide : 0), !0 === e.options.draggable && e.$list.addClass("draggable");
    }, e.prototype.buildRows = function () {
        var i,
            e,
            t,
            o,
            s,
            n,
            r,
            l = this;if (o = document.createDocumentFragment(), n = l.$slider.children(), l.options.rows > 1) {
            for (r = l.options.slidesPerRow * l.options.rows, s = Math.ceil(n.length / r), i = 0; i < s; i++) {
                var d = document.createElement("div");for (e = 0; e < l.options.rows; e++) {
                    var a = document.createElement("div");for (t = 0; t < l.options.slidesPerRow; t++) {
                        var c = i * r + (e * l.options.slidesPerRow + t);n.get(c) && a.appendChild(n.get(c));
                    }d.appendChild(a);
                }o.appendChild(d);
            }l.$slider.empty().append(o), l.$slider.children().children().children().css({ width: 100 / l.options.slidesPerRow + "%", display: "inline-block" });
        }
    }, e.prototype.checkResponsive = function (e, t) {
        var o,
            s,
            n,
            r = this,
            l = !1,
            d = r.$slider.width(),
            a = window.innerWidth || i(window).width();if ("window" === r.respondTo ? n = a : "slider" === r.respondTo ? n = d : "min" === r.respondTo && (n = Math.min(a, d)), r.options.responsive && r.options.responsive.length && null !== r.options.responsive) {
            s = null;for (o in r.breakpoints) {
                r.breakpoints.hasOwnProperty(o) && (!1 === r.originalSettings.mobileFirst ? n < r.breakpoints[o] && (s = r.breakpoints[o]) : n > r.breakpoints[o] && (s = r.breakpoints[o]));
            }null !== s ? null !== r.activeBreakpoint ? (s !== r.activeBreakpoint || t) && (r.activeBreakpoint = s, "unslick" === r.breakpointSettings[s] ? r.unslick(s) : (r.options = i.extend({}, r.originalSettings, r.breakpointSettings[s]), !0 === e && (r.currentSlide = r.options.initialSlide), r.refresh(e)), l = s) : (r.activeBreakpoint = s, "unslick" === r.breakpointSettings[s] ? r.unslick(s) : (r.options = i.extend({}, r.originalSettings, r.breakpointSettings[s]), !0 === e && (r.currentSlide = r.options.initialSlide), r.refresh(e)), l = s) : null !== r.activeBreakpoint && (r.activeBreakpoint = null, r.options = r.originalSettings, !0 === e && (r.currentSlide = r.options.initialSlide), r.refresh(e), l = s), e || !1 === l || r.$slider.trigger("breakpoint", [r, l]);
        }
    }, e.prototype.changeSlide = function (e, t) {
        var o,
            s,
            n,
            r = this,
            l = i(e.currentTarget);switch (l.is("a") && e.preventDefault(), l.is("li") || (l = l.closest("li")), n = r.slideCount % r.options.slidesToScroll != 0, o = n ? 0 : (r.slideCount - r.currentSlide) % r.options.slidesToScroll, e.data.message) {case "previous":
                s = 0 === o ? r.options.slidesToScroll : r.options.slidesToShow - o, r.slideCount > r.options.slidesToShow && r.slideHandler(r.currentSlide - s, !1, t);break;case "next":
                s = 0 === o ? r.options.slidesToScroll : o, r.slideCount > r.options.slidesToShow && r.slideHandler(r.currentSlide + s, !1, t);break;case "index":
                var d = 0 === e.data.index ? 0 : e.data.index || l.index() * r.options.slidesToScroll;r.slideHandler(r.checkNavigable(d), !1, t), l.children().trigger("focus");break;default:
                return;}
    }, e.prototype.checkNavigable = function (i) {
        var e, t;if (e = this.getNavigableIndexes(), t = 0, i > e[e.length - 1]) i = e[e.length - 1];else for (var o in e) {
            if (i < e[o]) {
                i = t;break;
            }t = e[o];
        }return i;
    }, e.prototype.cleanUpEvents = function () {
        var e = this;e.options.dots && null !== e.$dots && (i("li", e.$dots).off("click.slick", e.changeSlide).off("mouseenter.slick", i.proxy(e.interrupt, e, !0)).off("mouseleave.slick", i.proxy(e.interrupt, e, !1)), !0 === e.options.accessibility && e.$dots.off("keydown.slick", e.keyHandler)), e.$slider.off("focus.slick blur.slick"), !0 === e.options.arrows && e.slideCount > e.options.slidesToShow && (e.$prevArrow && e.$prevArrow.off("click.slick", e.changeSlide), e.$nextArrow && e.$nextArrow.off("click.slick", e.changeSlide), !0 === e.options.accessibility && (e.$prevArrow && e.$prevArrow.off("keydown.slick", e.keyHandler), e.$nextArrow && e.$nextArrow.off("keydown.slick", e.keyHandler))), e.$list.off("touchstart.slick mousedown.slick", e.swipeHandler), e.$list.off("touchmove.slick mousemove.slick", e.swipeHandler), e.$list.off("touchend.slick mouseup.slick", e.swipeHandler), e.$list.off("touchcancel.slick mouseleave.slick", e.swipeHandler), e.$list.off("click.slick", e.clickHandler), i(document).off(e.visibilityChange, e.visibility), e.cleanUpSlideEvents(), !0 === e.options.accessibility && e.$list.off("keydown.slick", e.keyHandler), !0 === e.options.focusOnSelect && i(e.$slideTrack).children().off("click.slick", e.selectHandler), i(window).off("orientationchange.slick.slick-" + e.instanceUid, e.orientationChange), i(window).off("resize.slick.slick-" + e.instanceUid, e.resize), i("[draggable!=true]", e.$slideTrack).off("dragstart", e.preventDefault), i(window).off("load.slick.slick-" + e.instanceUid, e.setPosition);
    }, e.prototype.cleanUpSlideEvents = function () {
        var e = this;e.$list.off("mouseenter.slick", i.proxy(e.interrupt, e, !0)), e.$list.off("mouseleave.slick", i.proxy(e.interrupt, e, !1));
    }, e.prototype.cleanUpRows = function () {
        var i,
            e = this;e.options.rows > 1 && ((i = e.$slides.children().children()).removeAttr("style"), e.$slider.empty().append(i));
    }, e.prototype.clickHandler = function (i) {
        !1 === this.shouldClick && (i.stopImmediatePropagation(), i.stopPropagation(), i.preventDefault());
    }, e.prototype.destroy = function (e) {
        var t = this;t.autoPlayClear(), t.touchObject = {}, t.cleanUpEvents(), i(".slick-cloned", t.$slider).detach(), t.$dots && t.$dots.remove(), t.$prevArrow && t.$prevArrow.length && (t.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", ""), t.htmlExpr.test(t.options.prevArrow) && t.$prevArrow.remove()), t.$nextArrow && t.$nextArrow.length && (t.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", ""), t.htmlExpr.test(t.options.nextArrow) && t.$nextArrow.remove()), t.$slides && (t.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function () {
            i(this).attr("style", i(this).data("originalStyling"));
        }), t.$slideTrack.children(this.options.slide).detach(), t.$slideTrack.detach(), t.$list.detach(), t.$slider.append(t.$slides)), t.cleanUpRows(), t.$slider.removeClass("slick-slider"), t.$slider.removeClass("slick-initialized"), t.$slider.removeClass("slick-dotted"), t.unslicked = !0, e || t.$slider.trigger("destroy", [t]);
    }, e.prototype.disableTransition = function (i) {
        var e = this,
            t = {};t[e.transitionType] = "", !1 === e.options.fade ? e.$slideTrack.css(t) : e.$slides.eq(i).css(t);
    }, e.prototype.fadeSlide = function (i, e) {
        var t = this;!1 === t.cssTransitions ? (t.$slides.eq(i).css({ zIndex: t.options.zIndex }), t.$slides.eq(i).animate({ opacity: 1 }, t.options.speed, t.options.easing, e)) : (t.applyTransition(i), t.$slides.eq(i).css({ opacity: 1, zIndex: t.options.zIndex }), e && setTimeout(function () {
            t.disableTransition(i), e.call();
        }, t.options.speed));
    }, e.prototype.fadeSlideOut = function (i) {
        var e = this;!1 === e.cssTransitions ? e.$slides.eq(i).animate({ opacity: 0, zIndex: e.options.zIndex - 2 }, e.options.speed, e.options.easing) : (e.applyTransition(i), e.$slides.eq(i).css({ opacity: 0, zIndex: e.options.zIndex - 2 }));
    }, e.prototype.filterSlides = e.prototype.slickFilter = function (i) {
        var e = this;null !== i && (e.$slidesCache = e.$slides, e.unload(), e.$slideTrack.children(this.options.slide).detach(), e.$slidesCache.filter(i).appendTo(e.$slideTrack), e.reinit());
    }, e.prototype.focusHandler = function () {
        var e = this;e.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick", "*", function (t) {
            t.stopImmediatePropagation();var o = i(this);setTimeout(function () {
                e.options.pauseOnFocus && (e.focussed = o.is(":focus"), e.autoPlay());
            }, 0);
        });
    }, e.prototype.getCurrent = e.prototype.slickCurrentSlide = function () {
        return this.currentSlide;
    }, e.prototype.getDotCount = function () {
        var i = this,
            e = 0,
            t = 0,
            o = 0;if (!0 === i.options.infinite) {
            if (i.slideCount <= i.options.slidesToShow) ++o;else for (; e < i.slideCount;) {
                ++o, e = t + i.options.slidesToScroll, t += i.options.slidesToScroll <= i.options.slidesToShow ? i.options.slidesToScroll : i.options.slidesToShow;
            }
        } else if (!0 === i.options.centerMode) o = i.slideCount;else if (i.options.asNavFor) for (; e < i.slideCount;) {
            ++o, e = t + i.options.slidesToScroll, t += i.options.slidesToScroll <= i.options.slidesToShow ? i.options.slidesToScroll : i.options.slidesToShow;
        } else o = 1 + Math.ceil((i.slideCount - i.options.slidesToShow) / i.options.slidesToScroll);return o - 1;
    }, e.prototype.getLeft = function (i) {
        var e,
            t,
            o,
            s,
            n = this,
            r = 0;return n.slideOffset = 0, t = n.$slides.first().outerHeight(!0), !0 === n.options.infinite ? (n.slideCount > n.options.slidesToShow && (n.slideOffset = n.slideWidth * n.options.slidesToShow * -1, s = -1, !0 === n.options.vertical && !0 === n.options.centerMode && (2 === n.options.slidesToShow ? s = -1.5 : 1 === n.options.slidesToShow && (s = -2)), r = t * n.options.slidesToShow * s), n.slideCount % n.options.slidesToScroll != 0 && i + n.options.slidesToScroll > n.slideCount && n.slideCount > n.options.slidesToShow && (i > n.slideCount ? (n.slideOffset = (n.options.slidesToShow - (i - n.slideCount)) * n.slideWidth * -1, r = (n.options.slidesToShow - (i - n.slideCount)) * t * -1) : (n.slideOffset = n.slideCount % n.options.slidesToScroll * n.slideWidth * -1, r = n.slideCount % n.options.slidesToScroll * t * -1))) : i + n.options.slidesToShow > n.slideCount && (n.slideOffset = (i + n.options.slidesToShow - n.slideCount) * n.slideWidth, r = (i + n.options.slidesToShow - n.slideCount) * t), n.slideCount <= n.options.slidesToShow && (n.slideOffset = 0, r = 0), !0 === n.options.centerMode && n.slideCount <= n.options.slidesToShow ? n.slideOffset = n.slideWidth * Math.floor(n.options.slidesToShow) / 2 - n.slideWidth * n.slideCount / 2 : !0 === n.options.centerMode && !0 === n.options.infinite ? n.slideOffset += n.slideWidth * Math.floor(n.options.slidesToShow / 2) - n.slideWidth : !0 === n.options.centerMode && (n.slideOffset = 0, n.slideOffset += n.slideWidth * Math.floor(n.options.slidesToShow / 2)), e = !1 === n.options.vertical ? i * n.slideWidth * -1 + n.slideOffset : i * t * -1 + r, !0 === n.options.variableWidth && (o = n.slideCount <= n.options.slidesToShow || !1 === n.options.infinite ? n.$slideTrack.children(".slick-slide").eq(i) : n.$slideTrack.children(".slick-slide").eq(i + n.options.slidesToShow), e = !0 === n.options.rtl ? o[0] ? -1 * (n.$slideTrack.width() - o[0].offsetLeft - o.width()) : 0 : o[0] ? -1 * o[0].offsetLeft : 0, !0 === n.options.centerMode && (o = n.slideCount <= n.options.slidesToShow || !1 === n.options.infinite ? n.$slideTrack.children(".slick-slide").eq(i) : n.$slideTrack.children(".slick-slide").eq(i + n.options.slidesToShow + 1), e = !0 === n.options.rtl ? o[0] ? -1 * (n.$slideTrack.width() - o[0].offsetLeft - o.width()) : 0 : o[0] ? -1 * o[0].offsetLeft : 0, e += (n.$list.width() - o.outerWidth()) / 2)), e;
    }, e.prototype.getOption = e.prototype.slickGetOption = function (i) {
        return this.options[i];
    }, e.prototype.getNavigableIndexes = function () {
        var i,
            e = this,
            t = 0,
            o = 0,
            s = [];for (!1 === e.options.infinite ? i = e.slideCount : (t = -1 * e.options.slidesToScroll, o = -1 * e.options.slidesToScroll, i = 2 * e.slideCount); t < i;) {
            s.push(t), t = o + e.options.slidesToScroll, o += e.options.slidesToScroll <= e.options.slidesToShow ? e.options.slidesToScroll : e.options.slidesToShow;
        }return s;
    }, e.prototype.getSlick = function () {
        return this;
    }, e.prototype.getSlideCount = function () {
        var e,
            t,
            o = this;return t = !0 === o.options.centerMode ? o.slideWidth * Math.floor(o.options.slidesToShow / 2) : 0, !0 === o.options.swipeToSlide ? (o.$slideTrack.find(".slick-slide").each(function (s, n) {
            if (n.offsetLeft - t + i(n).outerWidth() / 2 > -1 * o.swipeLeft) return e = n, !1;
        }), Math.abs(i(e).attr("data-slick-index") - o.currentSlide) || 1) : o.options.slidesToScroll;
    }, e.prototype.goTo = e.prototype.slickGoTo = function (i, e) {
        this.changeSlide({ data: { message: "index", index: parseInt(i) } }, e);
    }, e.prototype.init = function (e) {
        var t = this;i(t.$slider).hasClass("slick-initialized") || (i(t.$slider).addClass("slick-initialized"), t.buildRows(), t.buildOut(), t.setProps(), t.startLoad(), t.loadSlider(), t.initializeEvents(), t.updateArrows(), t.updateDots(), t.checkResponsive(!0), t.focusHandler()), e && t.$slider.trigger("init", [t]), !0 === t.options.accessibility && t.initADA(), t.options.autoplay && (t.paused = !1, t.autoPlay());
    }, e.prototype.initADA = function () {
        var e = this,
            t = Math.ceil(e.slideCount / e.options.slidesToShow),
            o = e.getNavigableIndexes().filter(function (i) {
            return i >= 0 && i < e.slideCount;
        });e.$slides.add(e.$slideTrack.find(".slick-cloned")).attr({ "aria-hidden": "true", tabindex: "-1" }).find("a, input, button, select").attr({ tabindex: "-1" }), null !== e.$dots && (e.$slides.not(e.$slideTrack.find(".slick-cloned")).each(function (t) {
            var s = o.indexOf(t);i(this).attr({ role: "tabpanel", id: "slick-slide" + e.instanceUid + t, tabindex: -1 }), -1 !== s && i(this).attr({ "aria-describedby": "slick-slide-control" + e.instanceUid + s });
        }), e.$dots.attr("role", "tablist").find("li").each(function (s) {
            var n = o[s];i(this).attr({ role: "presentation" }), i(this).find("button").first().attr({ role: "tab", id: "slick-slide-control" + e.instanceUid + s, "aria-controls": "slick-slide" + e.instanceUid + n, "aria-label": s + 1 + " of " + t, "aria-selected": null, tabindex: "-1" });
        }).eq(e.currentSlide).find("button").attr({ "aria-selected": "true", tabindex: "0" }).end());for (var s = e.currentSlide, n = s + e.options.slidesToShow; s < n; s++) {
            e.$slides.eq(s).attr("tabindex", 0);
        }e.activateADA();
    }, e.prototype.initArrowEvents = function () {
        var i = this;!0 === i.options.arrows && i.slideCount > i.options.slidesToShow && (i.$prevArrow.off("click.slick").on("click.slick", { message: "previous" }, i.changeSlide), i.$nextArrow.off("click.slick").on("click.slick", { message: "next" }, i.changeSlide), !0 === i.options.accessibility && (i.$prevArrow.on("keydown.slick", i.keyHandler), i.$nextArrow.on("keydown.slick", i.keyHandler)));
    }, e.prototype.initDotEvents = function () {
        var e = this;!0 === e.options.dots && (i("li", e.$dots).on("click.slick", { message: "index" }, e.changeSlide), !0 === e.options.accessibility && e.$dots.on("keydown.slick", e.keyHandler)), !0 === e.options.dots && !0 === e.options.pauseOnDotsHover && i("li", e.$dots).on("mouseenter.slick", i.proxy(e.interrupt, e, !0)).on("mouseleave.slick", i.proxy(e.interrupt, e, !1));
    }, e.prototype.initSlideEvents = function () {
        var e = this;e.options.pauseOnHover && (e.$list.on("mouseenter.slick", i.proxy(e.interrupt, e, !0)), e.$list.on("mouseleave.slick", i.proxy(e.interrupt, e, !1)));
    }, e.prototype.initializeEvents = function () {
        var e = this;e.initArrowEvents(), e.initDotEvents(), e.initSlideEvents(), e.$list.on("touchstart.slick mousedown.slick", { action: "start" }, e.swipeHandler), e.$list.on("touchmove.slick mousemove.slick", { action: "move" }, e.swipeHandler), e.$list.on("touchend.slick mouseup.slick", { action: "end" }, e.swipeHandler), e.$list.on("touchcancel.slick mouseleave.slick", { action: "end" }, e.swipeHandler), e.$list.on("click.slick", e.clickHandler), i(document).on(e.visibilityChange, i.proxy(e.visibility, e)), !0 === e.options.accessibility && e.$list.on("keydown.slick", e.keyHandler), !0 === e.options.focusOnSelect && i(e.$slideTrack).children().on("click.slick", e.selectHandler), i(window).on("orientationchange.slick.slick-" + e.instanceUid, i.proxy(e.orientationChange, e)), i(window).on("resize.slick.slick-" + e.instanceUid, i.proxy(e.resize, e)), i("[draggable!=true]", e.$slideTrack).on("dragstart", e.preventDefault), i(window).on("load.slick.slick-" + e.instanceUid, e.setPosition), i(e.setPosition);
    }, e.prototype.initUI = function () {
        var i = this;!0 === i.options.arrows && i.slideCount > i.options.slidesToShow && (i.$prevArrow.show(), i.$nextArrow.show()), !0 === i.options.dots && i.slideCount > i.options.slidesToShow && i.$dots.show();
    }, e.prototype.keyHandler = function (i) {
        var e = this;i.target.tagName.match("TEXTAREA|INPUT|SELECT") || (37 === i.keyCode && !0 === e.options.accessibility ? e.changeSlide({ data: { message: !0 === e.options.rtl ? "next" : "previous" } }) : 39 === i.keyCode && !0 === e.options.accessibility && e.changeSlide({ data: { message: !0 === e.options.rtl ? "previous" : "next" } }));
    }, e.prototype.lazyLoad = function () {
        function e(e) {
            i("img[data-lazy]", e).each(function () {
                var e = i(this),
                    t = i(this).attr("data-lazy"),
                    o = i(this).attr("data-srcset"),
                    s = i(this).attr("data-sizes") || n.$slider.attr("data-sizes"),
                    r = document.createElement("img");r.onload = function () {
                    e.animate({ opacity: 0 }, 100, function () {
                        o && (e.attr("srcset", o), s && e.attr("sizes", s)), e.attr("src", t).animate({ opacity: 1 }, 200, function () {
                            e.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading");
                        }), n.$slider.trigger("lazyLoaded", [n, e, t]);
                    });
                }, r.onerror = function () {
                    e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"), n.$slider.trigger("lazyLoadError", [n, e, t]);
                }, r.src = t;
            });
        }var t,
            o,
            s,
            n = this;if (!0 === n.options.centerMode ? !0 === n.options.infinite ? s = (o = n.currentSlide + (n.options.slidesToShow / 2 + 1)) + n.options.slidesToShow + 2 : (o = Math.max(0, n.currentSlide - (n.options.slidesToShow / 2 + 1)), s = n.options.slidesToShow / 2 + 1 + 2 + n.currentSlide) : (o = n.options.infinite ? n.options.slidesToShow + n.currentSlide : n.currentSlide, s = Math.ceil(o + n.options.slidesToShow), !0 === n.options.fade && (o > 0 && o--, s <= n.slideCount && s++)), t = n.$slider.find(".slick-slide").slice(o, s), "anticipated" === n.options.lazyLoad) for (var r = o - 1, l = s, d = n.$slider.find(".slick-slide"), a = 0; a < n.options.slidesToScroll; a++) {
            r < 0 && (r = n.slideCount - 1), t = (t = t.add(d.eq(r))).add(d.eq(l)), r--, l++;
        }e(t), n.slideCount <= n.options.slidesToShow ? e(n.$slider.find(".slick-slide")) : n.currentSlide >= n.slideCount - n.options.slidesToShow ? e(n.$slider.find(".slick-cloned").slice(0, n.options.slidesToShow)) : 0 === n.currentSlide && e(n.$slider.find(".slick-cloned").slice(-1 * n.options.slidesToShow));
    }, e.prototype.loadSlider = function () {
        var i = this;i.setPosition(), i.$slideTrack.css({ opacity: 1 }), i.$slider.removeClass("slick-loading"), i.initUI(), "progressive" === i.options.lazyLoad && i.progressiveLazyLoad();
    }, e.prototype.next = e.prototype.slickNext = function () {
        this.changeSlide({ data: { message: "next" } });
    }, e.prototype.orientationChange = function () {
        var i = this;i.checkResponsive(), i.setPosition();
    }, e.prototype.pause = e.prototype.slickPause = function () {
        var i = this;i.autoPlayClear(), i.paused = !0;
    }, e.prototype.play = e.prototype.slickPlay = function () {
        var i = this;i.autoPlay(), i.options.autoplay = !0, i.paused = !1, i.focussed = !1, i.interrupted = !1;
    }, e.prototype.postSlide = function (e) {
        var t = this;t.unslicked || (t.$slider.trigger("afterChange", [t, e]), t.animating = !1, t.slideCount > t.options.slidesToShow && t.setPosition(), t.swipeLeft = null, t.options.autoplay && t.autoPlay(), !0 === t.options.accessibility && (t.initADA(), t.options.focusOnChange && i(t.$slides.get(t.currentSlide)).attr("tabindex", 0).focus()));
    }, e.prototype.prev = e.prototype.slickPrev = function () {
        this.changeSlide({ data: { message: "previous" } });
    }, e.prototype.preventDefault = function (i) {
        i.preventDefault();
    }, e.prototype.progressiveLazyLoad = function (e) {
        e = e || 1;var t,
            o,
            s,
            n,
            r,
            l = this,
            d = i("img[data-lazy]", l.$slider);d.length ? (t = d.first(), o = t.attr("data-lazy"), s = t.attr("data-srcset"), n = t.attr("data-sizes") || l.$slider.attr("data-sizes"), (r = document.createElement("img")).onload = function () {
            s && (t.attr("srcset", s), n && t.attr("sizes", n)), t.attr("src", o).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"), !0 === l.options.adaptiveHeight && l.setPosition(), l.$slider.trigger("lazyLoaded", [l, t, o]), l.progressiveLazyLoad();
        }, r.onerror = function () {
            e < 3 ? setTimeout(function () {
                l.progressiveLazyLoad(e + 1);
            }, 500) : (t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"), l.$slider.trigger("lazyLoadError", [l, t, o]), l.progressiveLazyLoad());
        }, r.src = o) : l.$slider.trigger("allImagesLoaded", [l]);
    }, e.prototype.refresh = function (e) {
        var t,
            o,
            s = this;o = s.slideCount - s.options.slidesToShow, !s.options.infinite && s.currentSlide > o && (s.currentSlide = o), s.slideCount <= s.options.slidesToShow && (s.currentSlide = 0), t = s.currentSlide, s.destroy(!0), i.extend(s, s.initials, { currentSlide: t }), s.init(), e || s.changeSlide({ data: { message: "index", index: t } }, !1);
    }, e.prototype.registerBreakpoints = function () {
        var e,
            t,
            o,
            s = this,
            n = s.options.responsive || null;if ("array" === i.type(n) && n.length) {
            s.respondTo = s.options.respondTo || "window";for (e in n) {
                if (o = s.breakpoints.length - 1, n.hasOwnProperty(e)) {
                    for (t = n[e].breakpoint; o >= 0;) {
                        s.breakpoints[o] && s.breakpoints[o] === t && s.breakpoints.splice(o, 1), o--;
                    }s.breakpoints.push(t), s.breakpointSettings[t] = n[e].settings;
                }
            }s.breakpoints.sort(function (i, e) {
                return s.options.mobileFirst ? i - e : e - i;
            });
        }
    }, e.prototype.reinit = function () {
        var e = this;e.$slides = e.$slideTrack.children(e.options.slide).addClass("slick-slide"), e.slideCount = e.$slides.length, e.currentSlide >= e.slideCount && 0 !== e.currentSlide && (e.currentSlide = e.currentSlide - e.options.slidesToScroll), e.slideCount <= e.options.slidesToShow && (e.currentSlide = 0), e.registerBreakpoints(), e.setProps(), e.setupInfinite(), e.buildArrows(), e.updateArrows(), e.initArrowEvents(), e.buildDots(), e.updateDots(), e.initDotEvents(), e.cleanUpSlideEvents(), e.initSlideEvents(), e.checkResponsive(!1, !0), !0 === e.options.focusOnSelect && i(e.$slideTrack).children().on("click.slick", e.selectHandler), e.setSlideClasses("number" == typeof e.currentSlide ? e.currentSlide : 0), e.setPosition(), e.focusHandler(), e.paused = !e.options.autoplay, e.autoPlay(), e.$slider.trigger("reInit", [e]);
    }, e.prototype.resize = function () {
        var e = this;i(window).width() !== e.windowWidth && (clearTimeout(e.windowDelay), e.windowDelay = window.setTimeout(function () {
            e.windowWidth = i(window).width(), e.checkResponsive(), e.unslicked || e.setPosition();
        }, 50));
    }, e.prototype.removeSlide = e.prototype.slickRemove = function (i, e, t) {
        var o = this;if (i = "boolean" == typeof i ? !0 === (e = i) ? 0 : o.slideCount - 1 : !0 === e ? --i : i, o.slideCount < 1 || i < 0 || i > o.slideCount - 1) return !1;o.unload(), !0 === t ? o.$slideTrack.children().remove() : o.$slideTrack.children(this.options.slide).eq(i).remove(), o.$slides = o.$slideTrack.children(this.options.slide), o.$slideTrack.children(this.options.slide).detach(), o.$slideTrack.append(o.$slides), o.$slidesCache = o.$slides, o.reinit();
    }, e.prototype.setCSS = function (i) {
        var e,
            t,
            o = this,
            s = {};!0 === o.options.rtl && (i = -i), e = "left" == o.positionProp ? Math.ceil(i) + "px" : "0px", t = "top" == o.positionProp ? Math.ceil(i) + "px" : "0px", s[o.positionProp] = i, !1 === o.transformsEnabled ? o.$slideTrack.css(s) : (s = {}, !1 === o.cssTransitions ? (s[o.animType] = "translate(" + e + ", " + t + ")", o.$slideTrack.css(s)) : (s[o.animType] = "translate3d(" + e + ", " + t + ", 0px)", o.$slideTrack.css(s)));
    }, e.prototype.setDimensions = function () {
        var i = this;!1 === i.options.vertical ? !0 === i.options.centerMode && i.$list.css({ padding: "0px " + i.options.centerPadding }) : (i.$list.height(i.$slides.first().outerHeight(!0) * i.options.slidesToShow), !0 === i.options.centerMode && i.$list.css({ padding: i.options.centerPadding + " 0px" })), i.listWidth = i.$list.width(), i.listHeight = i.$list.height(), !1 === i.options.vertical && !1 === i.options.variableWidth ? (i.slideWidth = Math.ceil(i.listWidth / i.options.slidesToShow), i.$slideTrack.width(Math.ceil(i.slideWidth * i.$slideTrack.children(".slick-slide").length))) : !0 === i.options.variableWidth ? i.$slideTrack.width(5e3 * i.slideCount) : (i.slideWidth = Math.ceil(i.listWidth), i.$slideTrack.height(Math.ceil(i.$slides.first().outerHeight(!0) * i.$slideTrack.children(".slick-slide").length)));var e = i.$slides.first().outerWidth(!0) - i.$slides.first().width();!1 === i.options.variableWidth && i.$slideTrack.children(".slick-slide").width(i.slideWidth - e);
    }, e.prototype.setFade = function () {
        var e,
            t = this;t.$slides.each(function (o, s) {
            e = t.slideWidth * o * -1, !0 === t.options.rtl ? i(s).css({ position: "relative", right: e, top: 0, zIndex: t.options.zIndex - 2, opacity: 0 }) : i(s).css({ position: "relative", left: e, top: 0, zIndex: t.options.zIndex - 2, opacity: 0 });
        }), t.$slides.eq(t.currentSlide).css({ zIndex: t.options.zIndex - 1, opacity: 1 });
    }, e.prototype.setHeight = function () {
        var i = this;if (1 === i.options.slidesToShow && !0 === i.options.adaptiveHeight && !1 === i.options.vertical) {
            var e = i.$slides.eq(i.currentSlide).outerHeight(!0);i.$list.css("height", e);
        }
    }, e.prototype.setOption = e.prototype.slickSetOption = function () {
        var e,
            t,
            o,
            s,
            n,
            r = this,
            l = !1;if ("object" === i.type(arguments[0]) ? (o = arguments[0], l = arguments[1], n = "multiple") : "string" === i.type(arguments[0]) && (o = arguments[0], s = arguments[1], l = arguments[2], "responsive" === arguments[0] && "array" === i.type(arguments[1]) ? n = "responsive" : void 0 !== arguments[1] && (n = "single")), "single" === n) r.options[o] = s;else if ("multiple" === n) i.each(o, function (i, e) {
            r.options[i] = e;
        });else if ("responsive" === n) for (t in s) {
            if ("array" !== i.type(r.options.responsive)) r.options.responsive = [s[t]];else {
                for (e = r.options.responsive.length - 1; e >= 0;) {
                    r.options.responsive[e].breakpoint === s[t].breakpoint && r.options.responsive.splice(e, 1), e--;
                }r.options.responsive.push(s[t]);
            }
        }l && (r.unload(), r.reinit());
    }, e.prototype.setPosition = function () {
        var i = this;i.setDimensions(), i.setHeight(), !1 === i.options.fade ? i.setCSS(i.getLeft(i.currentSlide)) : i.setFade(), i.$slider.trigger("setPosition", [i]);
    }, e.prototype.setProps = function () {
        var i = this,
            e = document.body.style;i.positionProp = !0 === i.options.vertical ? "top" : "left", "top" === i.positionProp ? i.$slider.addClass("slick-vertical") : i.$slider.removeClass("slick-vertical"), void 0 === e.WebkitTransition && void 0 === e.MozTransition && void 0 === e.msTransition || !0 === i.options.useCSS && (i.cssTransitions = !0), i.options.fade && ("number" == typeof i.options.zIndex ? i.options.zIndex < 3 && (i.options.zIndex = 3) : i.options.zIndex = i.defaults.zIndex), void 0 !== e.OTransform && (i.animType = "OTransform", i.transformType = "-o-transform", i.transitionType = "OTransition", void 0 === e.perspectiveProperty && void 0 === e.webkitPerspective && (i.animType = !1)), void 0 !== e.MozTransform && (i.animType = "MozTransform", i.transformType = "-moz-transform", i.transitionType = "MozTransition", void 0 === e.perspectiveProperty && void 0 === e.MozPerspective && (i.animType = !1)), void 0 !== e.webkitTransform && (i.animType = "webkitTransform", i.transformType = "-webkit-transform", i.transitionType = "webkitTransition", void 0 === e.perspectiveProperty && void 0 === e.webkitPerspective && (i.animType = !1)), void 0 !== e.msTransform && (i.animType = "msTransform", i.transformType = "-ms-transform", i.transitionType = "msTransition", void 0 === e.msTransform && (i.animType = !1)), void 0 !== e.transform && !1 !== i.animType && (i.animType = "transform", i.transformType = "transform", i.transitionType = "transition"), i.transformsEnabled = i.options.useTransform && null !== i.animType && !1 !== i.animType;
    }, e.prototype.setSlideClasses = function (i) {
        var e,
            t,
            o,
            s,
            n = this;if (t = n.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden", "true"), n.$slides.eq(i).addClass("slick-current"), !0 === n.options.centerMode) {
            var r = n.options.slidesToShow % 2 == 0 ? 1 : 0;e = Math.floor(n.options.slidesToShow / 2), !0 === n.options.infinite && (i >= e && i <= n.slideCount - 1 - e ? n.$slides.slice(i - e + r, i + e + 1).addClass("slick-active").attr("aria-hidden", "false") : (o = n.options.slidesToShow + i, t.slice(o - e + 1 + r, o + e + 2).addClass("slick-active").attr("aria-hidden", "false")), 0 === i ? t.eq(t.length - 1 - n.options.slidesToShow).addClass("slick-center") : i === n.slideCount - 1 && t.eq(n.options.slidesToShow).addClass("slick-center")), n.$slides.eq(i).addClass("slick-center");
        } else i >= 0 && i <= n.slideCount - n.options.slidesToShow ? n.$slides.slice(i, i + n.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false") : t.length <= n.options.slidesToShow ? t.addClass("slick-active").attr("aria-hidden", "false") : (s = n.slideCount % n.options.slidesToShow, o = !0 === n.options.infinite ? n.options.slidesToShow + i : i, n.options.slidesToShow == n.options.slidesToScroll && n.slideCount - i < n.options.slidesToShow ? t.slice(o - (n.options.slidesToShow - s), o + s).addClass("slick-active").attr("aria-hidden", "false") : t.slice(o, o + n.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false"));"ondemand" !== n.options.lazyLoad && "anticipated" !== n.options.lazyLoad || n.lazyLoad();
    }, e.prototype.setupInfinite = function () {
        var e,
            t,
            o,
            s = this;if (!0 === s.options.fade && (s.options.centerMode = !1), !0 === s.options.infinite && !1 === s.options.fade && (t = null, s.slideCount > s.options.slidesToShow)) {
            for (o = !0 === s.options.centerMode ? s.options.slidesToShow + 1 : s.options.slidesToShow, e = s.slideCount; e > s.slideCount - o; e -= 1) {
                t = e - 1, i(s.$slides[t]).clone(!0).attr("id", "").attr("data-slick-index", t - s.slideCount).prependTo(s.$slideTrack).addClass("slick-cloned");
            }for (e = 0; e < o + s.slideCount; e += 1) {
                t = e, i(s.$slides[t]).clone(!0).attr("id", "").attr("data-slick-index", t + s.slideCount).appendTo(s.$slideTrack).addClass("slick-cloned");
            }s.$slideTrack.find(".slick-cloned").find("[id]").each(function () {
                i(this).attr("id", "");
            });
        }
    }, e.prototype.interrupt = function (i) {
        var e = this;i || e.autoPlay(), e.interrupted = i;
    }, e.prototype.selectHandler = function (e) {
        var t = this,
            o = i(e.target).is(".slick-slide") ? i(e.target) : i(e.target).parents(".slick-slide"),
            s = parseInt(o.attr("data-slick-index"));s || (s = 0), t.slideCount <= t.options.slidesToShow ? t.slideHandler(s, !1, !0) : t.slideHandler(s);
    }, e.prototype.slideHandler = function (i, e, t) {
        var o,
            s,
            n,
            r,
            l,
            d = null,
            a = this;if (e = e || !1, !(!0 === a.animating && !0 === a.options.waitForAnimate || !0 === a.options.fade && a.currentSlide === i)) if (!1 === e && a.asNavFor(i), o = i, d = a.getLeft(o), r = a.getLeft(a.currentSlide), a.currentLeft = null === a.swipeLeft ? r : a.swipeLeft, !1 === a.options.infinite && !1 === a.options.centerMode && (i < 0 || i > a.getDotCount() * a.options.slidesToScroll)) !1 === a.options.fade && (o = a.currentSlide, !0 !== t ? a.animateSlide(r, function () {
            a.postSlide(o);
        }) : a.postSlide(o));else if (!1 === a.options.infinite && !0 === a.options.centerMode && (i < 0 || i > a.slideCount - a.options.slidesToScroll)) !1 === a.options.fade && (o = a.currentSlide, !0 !== t ? a.animateSlide(r, function () {
            a.postSlide(o);
        }) : a.postSlide(o));else {
            if (a.options.autoplay && clearInterval(a.autoPlayTimer), s = o < 0 ? a.slideCount % a.options.slidesToScroll != 0 ? a.slideCount - a.slideCount % a.options.slidesToScroll : a.slideCount + o : o >= a.slideCount ? a.slideCount % a.options.slidesToScroll != 0 ? 0 : o - a.slideCount : o, a.animating = !0, a.$slider.trigger("beforeChange", [a, a.currentSlide, s]), n = a.currentSlide, a.currentSlide = s, a.setSlideClasses(a.currentSlide), a.options.asNavFor && (l = (l = a.getNavTarget()).slick("getSlick")).slideCount <= l.options.slidesToShow && l.setSlideClasses(a.currentSlide), a.updateDots(), a.updateArrows(), !0 === a.options.fade) return !0 !== t ? (a.fadeSlideOut(n), a.fadeSlide(s, function () {
                a.postSlide(s);
            })) : a.postSlide(s), void a.animateHeight();!0 !== t ? a.animateSlide(d, function () {
                a.postSlide(s);
            }) : a.postSlide(s);
        }
    }, e.prototype.startLoad = function () {
        var i = this;!0 === i.options.arrows && i.slideCount > i.options.slidesToShow && (i.$prevArrow.hide(), i.$nextArrow.hide()), !0 === i.options.dots && i.slideCount > i.options.slidesToShow && i.$dots.hide(), i.$slider.addClass("slick-loading");
    }, e.prototype.swipeDirection = function () {
        var i,
            e,
            t,
            o,
            s = this;return i = s.touchObject.startX - s.touchObject.curX, e = s.touchObject.startY - s.touchObject.curY, t = Math.atan2(e, i), (o = Math.round(180 * t / Math.PI)) < 0 && (o = 360 - Math.abs(o)), o <= 45 && o >= 0 ? !1 === s.options.rtl ? "left" : "right" : o <= 360 && o >= 315 ? !1 === s.options.rtl ? "left" : "right" : o >= 135 && o <= 225 ? !1 === s.options.rtl ? "right" : "left" : !0 === s.options.verticalSwiping ? o >= 35 && o <= 135 ? "down" : "up" : "vertical";
    }, e.prototype.swipeEnd = function (i) {
        var e,
            t,
            o = this;if (o.dragging = !1, o.swiping = !1, o.scrolling) return o.scrolling = !1, !1;if (o.interrupted = !1, o.shouldClick = !(o.touchObject.swipeLength > 10), void 0 === o.touchObject.curX) return !1;if (!0 === o.touchObject.edgeHit && o.$slider.trigger("edge", [o, o.swipeDirection()]), o.touchObject.swipeLength >= o.touchObject.minSwipe) {
            switch (t = o.swipeDirection()) {case "left":case "down":
                    e = o.options.swipeToSlide ? o.checkNavigable(o.currentSlide + o.getSlideCount()) : o.currentSlide + o.getSlideCount(), o.currentDirection = 0;break;case "right":case "up":
                    e = o.options.swipeToSlide ? o.checkNavigable(o.currentSlide - o.getSlideCount()) : o.currentSlide - o.getSlideCount(), o.currentDirection = 1;}"vertical" != t && (o.slideHandler(e), o.touchObject = {}, o.$slider.trigger("swipe", [o, t]));
        } else o.touchObject.startX !== o.touchObject.curX && (o.slideHandler(o.currentSlide), o.touchObject = {});
    }, e.prototype.swipeHandler = function (i) {
        var e = this;if (!(!1 === e.options.swipe || "ontouchend" in document && !1 === e.options.swipe || !1 === e.options.draggable && -1 !== i.type.indexOf("mouse"))) switch (e.touchObject.fingerCount = i.originalEvent && void 0 !== i.originalEvent.touches ? i.originalEvent.touches.length : 1, e.touchObject.minSwipe = e.listWidth / e.options.touchThreshold, !0 === e.options.verticalSwiping && (e.touchObject.minSwipe = e.listHeight / e.options.touchThreshold), i.data.action) {case "start":
                e.swipeStart(i);break;case "move":
                e.swipeMove(i);break;case "end":
                e.swipeEnd(i);}
    }, e.prototype.swipeMove = function (i) {
        var e,
            t,
            o,
            s,
            n,
            r,
            l = this;return n = void 0 !== i.originalEvent ? i.originalEvent.touches : null, !(!l.dragging || l.scrolling || n && 1 !== n.length) && (e = l.getLeft(l.currentSlide), l.touchObject.curX = void 0 !== n ? n[0].pageX : i.clientX, l.touchObject.curY = void 0 !== n ? n[0].pageY : i.clientY, l.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(l.touchObject.curX - l.touchObject.startX, 2))), r = Math.round(Math.sqrt(Math.pow(l.touchObject.curY - l.touchObject.startY, 2))), !l.options.verticalSwiping && !l.swiping && r > 4 ? (l.scrolling = !0, !1) : (!0 === l.options.verticalSwiping && (l.touchObject.swipeLength = r), t = l.swipeDirection(), void 0 !== i.originalEvent && l.touchObject.swipeLength > 4 && (l.swiping = !0, i.preventDefault()), s = (!1 === l.options.rtl ? 1 : -1) * (l.touchObject.curX > l.touchObject.startX ? 1 : -1), !0 === l.options.verticalSwiping && (s = l.touchObject.curY > l.touchObject.startY ? 1 : -1), o = l.touchObject.swipeLength, l.touchObject.edgeHit = !1, !1 === l.options.infinite && (0 === l.currentSlide && "right" === t || l.currentSlide >= l.getDotCount() && "left" === t) && (o = l.touchObject.swipeLength * l.options.edgeFriction, l.touchObject.edgeHit = !0), !1 === l.options.vertical ? l.swipeLeft = e + o * s : l.swipeLeft = e + o * (l.$list.height() / l.listWidth) * s, !0 === l.options.verticalSwiping && (l.swipeLeft = e + o * s), !0 !== l.options.fade && !1 !== l.options.touchMove && (!0 === l.animating ? (l.swipeLeft = null, !1) : void l.setCSS(l.swipeLeft))));
    }, e.prototype.swipeStart = function (i) {
        var e,
            t = this;if (t.interrupted = !0, 1 !== t.touchObject.fingerCount || t.slideCount <= t.options.slidesToShow) return t.touchObject = {}, !1;void 0 !== i.originalEvent && void 0 !== i.originalEvent.touches && (e = i.originalEvent.touches[0]), t.touchObject.startX = t.touchObject.curX = void 0 !== e ? e.pageX : i.clientX, t.touchObject.startY = t.touchObject.curY = void 0 !== e ? e.pageY : i.clientY, t.dragging = !0;
    }, e.prototype.unfilterSlides = e.prototype.slickUnfilter = function () {
        var i = this;null !== i.$slidesCache && (i.unload(), i.$slideTrack.children(this.options.slide).detach(), i.$slidesCache.appendTo(i.$slideTrack), i.reinit());
    }, e.prototype.unload = function () {
        var e = this;i(".slick-cloned", e.$slider).remove(), e.$dots && e.$dots.remove(), e.$prevArrow && e.htmlExpr.test(e.options.prevArrow) && e.$prevArrow.remove(), e.$nextArrow && e.htmlExpr.test(e.options.nextArrow) && e.$nextArrow.remove(), e.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden", "true").css("width", "");
    }, e.prototype.unslick = function (i) {
        var e = this;e.$slider.trigger("unslick", [e, i]), e.destroy();
    }, e.prototype.updateArrows = function () {
        var i = this;Math.floor(i.options.slidesToShow / 2), !0 === i.options.arrows && i.slideCount > i.options.slidesToShow && !i.options.infinite && (i.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false"), i.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false"), 0 === i.currentSlide ? (i.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true"), i.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false")) : i.currentSlide >= i.slideCount - i.options.slidesToShow && !1 === i.options.centerMode ? (i.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true"), i.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false")) : i.currentSlide >= i.slideCount - 1 && !0 === i.options.centerMode && (i.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true"), i.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false")));
    }, e.prototype.updateDots = function () {
        var i = this;null !== i.$dots && (i.$dots.find("li").removeClass("slick-active").end(), i.$dots.find("li").eq(Math.floor(i.currentSlide / i.options.slidesToScroll)).addClass("slick-active"));
    }, e.prototype.visibility = function () {
        var i = this;i.options.autoplay && (document[i.hidden] ? i.interrupted = !0 : i.interrupted = !1);
    }, i.fn.slick = function () {
        var i,
            t,
            o = this,
            s = arguments[0],
            n = Array.prototype.slice.call(arguments, 1),
            r = o.length;for (i = 0; i < r; i++) {
            if ("object" == (typeof s === 'undefined' ? 'undefined' : _typeof(s)) || void 0 === s ? o[i].slick = new e(o[i], s) : t = o[i].slick[s].apply(o[i].slick, n), void 0 !== t) return t;
        }return o;
    };
});

(function () {

    var width = window.innerWidth;
    var isMobileLarge = 640 <= width && width <= 767;

    var prevArrow = ' \n        <svg class="c-sliderArrow c-sliderArrow--left" width="18px" height="34px" viewBox="0 0 18 34" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n            <g id="Symbols" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n                <g id="375-celebs" transform="translate(-243.000000, -121.000000)" fill="#000000">\n                    <g id="celebs">\n                        <g id="arrows" transform="translate(243.000000, 121.000000)">\n                            <polygon id="left" points="0 17 16.2580645 34 18 32.1785714 3.48387097 17 18 1.82142857 16.2580645 0"></polygon>\n                        </g>\n                    </g>\n                </g>\n            </g>\n        </svg>';
    var nextArrow = '\n            <svg class="c-sliderArrow c-sliderArrow--right" width="18px" height="34px" viewBox="0 0 18 34" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n            <g id="Symbols" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n                <g id="375-celebs" transform="translate(-576.000000, -121.000000)" fill="#000000">\n                    <g id="celebs">\n                        <g id="arrows" transform="translate(243.000000, 121.000000)">\n                            <polygon id="right" transform="translate(342.000000, 17.000000) rotate(-180.000000) translate(-342.000000, -17.000000) " points="333 17 349.258065 34 351 32.1785714 336.483871 17 351 1.82142857 349.258065 0"></polygon>\n                        </g>\n                    </g>\n                </g>\n            </g>\n        </svg>';

    var hpCustomGridSliderSettings = {
        mobileFirst: true,
        centerMode: true,
        centerPadding: '46px',
        slidesToShow: 1,
        infinite: false,
        responsive: [{
            breakpoint: 640,
            initialSlide: 1,
            settings: {
                slidesToShow: 2,
                initialSlide: 1
            }
        }, {
            breakpoint: 768,
            settings: "unslick"
        }],
        prevArrow: prevArrow,
        nextArrow: nextArrow
    };

    var hpProductsSliderSettings = {
        mobileFirst: true,
        centerMode: true,
        centerPadding: '46px',
        slidesToShow: 1,
        infinite: false,
        responsive: [{
            breakpoint: 640,
            initialSlide: 1,
            settings: {
                slidesToShow: 2,
                initialSlide: 1
            }
        }, {
            breakpoint: 768,
            settings: "unslick"
        }],
        prevArrow: prevArrow,
        nextArrow: nextArrow
    };

    var productImageSliderSettings = {
        mobileFirst: true,
        centerMode: true,
        centerPadding: '46px',
        slidesToShow: 1,
        infinite: true,
        responsive: [{
            breakpoint: 640,
            initialSlide: 1,
            settings: {
                slidesToShow: 2,
                initialSlide: 1
            }
        }, {
            breakpoint: 768,
            settings: "unslick"
        }],
        prevArrow: prevArrow,
        nextArrow: nextArrow
    };

    var productRelatedProductsSettings = {
        mobileFirst: true,
        centerMode: true,
        centerPadding: '46px',
        slidesToShow: 1,
        infinite: true,
        responsive: [{
            breakpoint: 640,
            initialSlide: 1,
            settings: {
                slidesToShow: 2,
                initialSlide: 1
            }
        }, {
            breakpoint: 768,
            settings: "unslick"
        }],
        prevArrow: prevArrow,
        nextArrow: nextArrow
    };

    var hpInstagramGridSliderSettings = {
        mobileFirst: true,
        centerMode: true,
        centerPadding: '46px',
        slidesToShow: 1,
        infinite: false,
        responsive: [{
            breakpoint: 768,
            settings: "unslick"
        }],
        prevArrow: prevArrow,
        nextArrow: nextArrow
    };

    function waitForEl(selector, callback) {
        if (jQuery(selector).length) {
            callback();
        } else {
            setTimeout(function () {
                waitForEl(selector, callback);
            }, 100);
        }
    }

    function twoCenterSlides(slider) {
        slider.on('init', function (event, slick) {
            slider.find('.slick-current').prev().addClass('slick-current-override');
        });

        slider.on('beforeChange', function (event, slick, currentSlide, nextSlide) {
            var nextCurrentSlideEl = $('[data-slick-index=\'' + nextSlide + '\']');
            $('.slick-current-override').removeClass('slick-current-override');
            $(nextCurrentSlideEl).prev().addClass('slick-current-override');
        });
    }

    // disable non current slides that are links
    $('.slick-slide:not(.slick-active)').on('click', function (event) {
        event.preventDefault();
    });

    // home page sliders
    var homeCustomGridSlider = $('.js-hp-custom-grid-slider');
    var homeProductsSlider = $('.js-hp-products-slider');

    // product sliders
    var productImageSlider = $('.js-product-image-slider');
    var productRelatedProductsSlider = $('.js-product-related-products-slider');

    // set up logic for stlying 2 centered slides on mobile large sliders
    if (isMobileLarge) {
        twoCenterSlides(homeCustomGridSlider);
        twoCenterSlides(homeProductsSlider);
        twoCenterSlides(productImageSlider);
        twoCenterSlides(productRelatedProductsSlider);
    }

    // init home sliders
    homeCustomGridSlider.slick(hpCustomGridSliderSettings);
    homeProductsSlider.slick(hpProductsSliderSettings);
    // wait until fourSixty loads instagram feed
    waitForEl('.fs-timeline-entry', function () {
        $('.c-hpIGridSection .fs-timeline').slick(hpInstagramGridSliderSettings);
    });

    // init product sliders
    productImageSlider.slick(productImageSliderSettings);
    productRelatedProductsSlider.slick(productRelatedProductsSettings);
})();
{% raw %}//# sourceMappingURL={% endraw %}components.js.map
