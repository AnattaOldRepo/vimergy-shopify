<div class="c-collections">
	<div class="c-collections__content o-flex">
		<div class="c-collections__left o-flex__col-lg-2">
			<div class="c-colFilter__mobile">
					<h3 class="c-collFilters__mobileTitle">Filter By</h3>
			</div>

			<div class="c-collFilters">
        {% comment %} <div class="c-collectionSortby">
					<label class="c-collFiltersGroup__title" onclick="filters.clearFilter(true)">Clear All</label>
				</div> {% endcomment %}
				<h3 class="c-collFilters__title">Filter By</h3>
				{% if collection.handle == "shop" %}
					<div class="c-collFiltersGroup">
						<h4 class="c-collFiltersGroup__title">Type</h4>
						<div class="c-collFiltersGroup__list">
							<label class="c-collFiltersGroup__wrap-item">
								<input class="c-collFiltersGroup__item-model" value="capsule" data-filter="type" name="filter-model" onchange="filters.onFilterChange(this)" type="checkbox"/>
								<div class="c-collFiltersGroup__item">
									<span class="c-collFiltersGroup__itemText">Capsule</span>
								</div>
							</label>
							<label class="c-collFiltersGroup__wrap-item">
								<input class="c-collFiltersGroup__item-model" value="liquid" data-filter="type" name="filter-model" onchange="filters.onFilterChange(this)" type="checkbox"/>
								<div class="c-collFiltersGroup__item">
									<span class="c-collFiltersGroup__itemText">Liquid</span>
								</div>
							</label>
							<label class="c-collFiltersGroup__wrap-item">
								<input class="c-collFiltersGroup__item-model" value="powder" data-filter="type" name="filter-model" onchange="filters.onFilterChange(this)" type="checkbox"/>
								<div class="c-collFiltersGroup__item">
									<span class="c-collFiltersGroup__itemText">Powder</span>
								</div>
							</label>
							<label class="c-collFiltersGroup__wrap-item">
								<input class="c-collFiltersGroup__item-model" value="tea" data-filter="type" name="filter-model" onchange="filters.onFilterChange(this)" type="checkbox"/>
								<div class="c-collFiltersGroup__item">
									<span class="c-collFiltersGroup__itemText">Tea</span>
								</div>
							</label>
						</div>
					</div>
					<div class="c-collFiltersGroup">
						<h4 class="c-collFiltersGroup__title">Packaging</h4>
						<div class="c-collFiltersGroup__list">
							<label class="c-collFiltersGroup__wrap-item">
								<input class="c-collFiltersGroup__item-model" value="single" data-filter="packaging" name="filter-model" onchange="filters.onFilterChange(this)" type="checkbox"/>
								<div class="c-collFiltersGroup__item">
									<span class="c-collFiltersGroup__itemText">Single</span>
								</div>
							</label>
							<label class="c-collFiltersGroup__wrap-item">
								<input class="c-collFiltersGroup__item-model" value="kits" data-filter="packaging" name="filter-model" onchange="filters.onFilterChange(this)" type="checkbox"/>
								<div class="c-collFiltersGroup__item">
									<span class="c-collFiltersGroup__itemText">Kits</span>
								</div>
							</label>
						</div>
					</div>
				{% endif %}
				<div class="c-collFiltersGroup">
					<h4 class="c-collFiltersGroup__title">Special Offers</h4>
					<div class="c-collFiltersGroup__list">
					<label class="c-collFiltersGroup__wrap-item">
						<input class="c-collFiltersGroup__item-model" value="new" data-filter="so" name="filter-model" onchange="filters.onFilterChange(this)" type="checkbox"/>
						<div class="c-collFiltersGroup__item">
							<span class="c-collFiltersGroup__itemText">New</span>
						</div>
					</label>
					<label class="c-collFiltersGroup__wrap-item">
						<input class="c-collFiltersGroup__item-model" value="best-seller" data-filter="so" name="filter-model" onchange="filters.onFilterChange(this)" type="checkbox"/>
						<div class="c-collFiltersGroup__item">
							<span class="c-collFiltersGroup__itemText">Best Seller</span>
						</div>
					</label>
					<label class="c-collFiltersGroup__wrap-item">
						<input class="c-collFiltersGroup__item-model" value="sale" data-filter="so" name="filter-model" onchange="filters.onFilterChange(this)" type="checkbox"/>
						<div class="c-collFiltersGroup__item">
							<span class="c-collFiltersGroup__itemText">Sale</span>
						</div>
					</label>
					</div>
				</div>
			</div>
		</div>
		<div class="c-collections__right o-flex__col-lg-10">
			<div class="c-collectionBar o-flex">
				<span class="filter-result">Showing All products ( <span class="item-count"> </span> )</span>
				 <div class="c-collectionSortby o-flex">
					<label class="c-collFiltersGroup__title" onclick="filters.clearFilter(true)">Clear All</label>
				</div>
			</div>
			<div class="c-collections__row o-flex">

				{% comment %} Collection pages product grids {% endcomment %}
				{% for product in collection.products %}
					<div class="c-product__item o-flex__item o-flex__col-4" data-filter="{{ product.tags |  join: ',' }}">
						<a href="{{ product.url }}" title="{{ product.title }}" class="c-product__link">
							<div class="c-product__img">
								<img class="c-product__Mainimage" src="{{ product.images[0].src  | img_url: 'large' }}">
								<img class="c-product__hoverImage" src="{{ product.images[1].src  | img_url: 'large' }}">
							</div>
							<div class="c-product__info">
								<h2 class="c-product__name">{{ product.title  }}</h2>
								<h2 class="c-product__price">{{ product.price  | money}}</h2>
							</div>
							<div class="c-product__hoverText"><span>view details</span></div>
						</a>
					</div>
				{% endfor %}

			</div>
		</div>
	</div>
</div>

<script>
  var filters = {
	visibleItem: 0,
    item_selector: ".c-product__item",
    filter_model: ".c-collFiltersGroup__item-model",
    appliedFilters: {},
    multiple_filter_enable: false,
    single_in_eachCategory: true,
    getProducts: function(){
      if(!this.products){
        this.products = $(this.item_selector);
      }
      return this.products;
    },
    onFilterChange: function(el){
		this.visibleItem = 0;
      this.buildFilter(el);
      if(this.isFilterEmpty()){
        	this.clearFilter();
      }else{
        $(".c-collectionSortby").show(0);
        this.applyFilter();
      }
      console.log(this.appliedFilters);
	  this.updateCount();
    },
    isFilterEmpty: function(){
      var _filters = Object.keys(this.appliedFilters), _isFilterEmpty = true;
      if(_filters.length > 0){
        for(var i=0; i<_filters.length;i++){
          if(this.appliedFilters[_filters[i]].length > 0){
            _isFilterEmpty = false;
          }
        }
      }
      return _isFilterEmpty;
    },
    clearFilter: function(uncheckAll){
      this.appliedFilters = {};
	  this.visibleItem = 8;
	  this.updateCount();
      this.getProducts().show(0);
	  $(".c-collectionSortby").hide(0);

      if(uncheckAll){
        $(this.filter_model).prop("checked", false);
      }
    },
	updateCount: function(){
		$('.item-count').text(this.visibleItem);
	},
    checkFilterMode: function(el){
		if(this.single_in_eachCategory){
			if(el.checked){
				var fkeys = Object.keys(this.appliedFilters);
				for(var i=0; i<fkeys.length; i++){
					if(this.appliedFilters[fkeys[i]].length == 1 && el.dataset.filter == fkeys[i]){
						$("[data-filter="+ fkeys[i] +"][value="+ this.appliedFilters[fkeys[i]][0] +"]").prop("checked", false);
						this.appliedFilters[fkeys[i]].length = 0;
					}
				}
			}else{
				delete this.appliedFilters[el.dataset.filter];
			}
      	}else if(!this.multiple_filter_enable){
    		this.appliedFilters = {};
      	}
    },
    buildFilter: function(el){
		this.checkFilterMode(el);
		if(el.checked){
			var filter_config = {
				category: el.dataset.filter.toLowerCase(),
				selected: el.value.toLowerCase()
			},
			appliedFilters = this.appliedFilters[filter_config.category],
			isFilterSelected;

			if(!appliedFilters){
				this.appliedFilters[filter_config.category] = [filter_config.selected];
			}else{
				isFilterSelected = appliedFilters.indexOf(filter_config.selected);
				if(isFilterSelected == -1){
				appliedFilters.push(filter_config.selected);
				}else{
				appliedFilters.splice(isFilterSelected, 1);
				}
			}
	  	}
    },
    applyFilter: function(){
      var _this = this,
      products = _this.getProducts();

      products.each(function(){
        var filters = this.dataset.filter;
        if(_this.matchFilters(filters)){
          $(this).show(0);
		  	_this.visibleItem++
        }else{
          $(this).hide(0);
        }
      });
    },

    matchFilters: function(filters){
      var frs = filters.split(","), filterName, category, aFilter, isMatched = false;
      for(var i=0; i<frs.length; i++){
        filterName = frs[i];

        if(filterName.indexOf("filter-") > -1){
          filterName = filterName.replace('filter-', '').split("-");
          category = filterName[0];
          aFilter = filterName.slice(1).join("-");

          if(this.appliedFilters[category] && this.appliedFilters[category].indexOf(aFilter) > -1){
            isMatched = true;
            break;
          }
        }
      }

      return isMatched;
    }
  }

  filters.visibleItem = {{ collection.products.length }}
  filters.updateCount();
</script>